{"/home/travis/build/npmtest/node-npmtest-enzyme/test.js":"/* istanbul instrument in package npmtest_enzyme */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-enzyme/lib.npmtest_enzyme.js":"/* istanbul instrument in package npmtest_enzyme */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_enzyme = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_enzyme = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-enzyme/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-enzyme && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_enzyme */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_enzyme\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_enzyme.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_enzyme.rollup.js'] =\n            local.assetsDict['/assets.npmtest_enzyme.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_enzyme.__dirname + '/lib.npmtest_enzyme.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-enzyme/node_modules/enzyme/build/index.js":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ReactWrapper = exports.ShallowWrapper = exports.mount = exports.shallow = exports.render = undefined;\n\nvar _ReactWrapper = require('./ReactWrapper');\n\nvar _ReactWrapper2 = _interopRequireDefault(_ReactWrapper);\n\nvar _ShallowWrapper = require('./ShallowWrapper');\n\nvar _ShallowWrapper2 = _interopRequireDefault(_ShallowWrapper);\n\nvar _mount = require('./mount');\n\nvar _mount2 = _interopRequireDefault(_mount);\n\nvar _shallow = require('./shallow');\n\nvar _shallow2 = _interopRequireDefault(_shallow);\n\nvar _render = require('./render');\n\nvar _render2 = _interopRequireDefault(_render);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nexports.render = _render2['default'];\nexports.shallow = _shallow2['default'];\nexports.mount = _mount2['default'];\nexports.ShallowWrapper = _ShallowWrapper2['default'];\nexports.ReactWrapper = _ReactWrapper2['default'];","/home/travis/build/npmtest/node-npmtest-enzyme/node_modules/enzyme/build/ReactWrapper.js":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _cheerio = require('cheerio');\n\nvar _cheerio2 = _interopRequireDefault(_cheerio);\n\nvar _flatten = require('lodash/flatten');\n\nvar _flatten2 = _interopRequireDefault(_flatten);\n\nvar _uniq = require('lodash/uniq');\n\nvar _uniq2 = _interopRequireDefault(_uniq);\n\nvar _compact = require('lodash/compact');\n\nvar _compact2 = _interopRequireDefault(_compact);\n\nvar _ComplexSelector = require('./ComplexSelector');\n\nvar _ComplexSelector2 = _interopRequireDefault(_ComplexSelector);\n\nvar _ReactWrapperComponent = require('./ReactWrapperComponent');\n\nvar _ReactWrapperComponent2 = _interopRequireDefault(_ReactWrapperComponent);\n\nvar _MountedTraversal = require('./MountedTraversal');\n\nvar _reactCompat = require('./react-compat');\n\nvar _Utils = require('./Utils');\n\nvar _Debug = require('./Debug');\n\nvar _version = require('./version');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Finds all nodes in the current wrapper nodes' render trees that match the provided predicate\n * function.\n *\n * @param {ReactWrapper} wrapper\n * @param {Function} predicate\n * @param {Function} filter\n * @returns {ReactWrapper}\n */\nfunction findWhereUnwrapped(wrapper, predicate) {\n  var filter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _MountedTraversal.treeFilter;\n\n  return wrapper.flatMap(function (n) {\n    return filter(n.getNode(), predicate);\n  });\n}\n\n/**\n * Returns a new wrapper instance with only the nodes of the current wrapper instance that match\n * the provided predicate function.\n *\n * @param {ReactWrapper} wrapper\n * @param {Function} predicate\n * @returns {ReactWrapper}\n */\nfunction filterWhereUnwrapped(wrapper, predicate) {\n  return wrapper.wrap((0, _compact2['default'])(wrapper.getNodes().filter(predicate)));\n}\n\n/**\n * @class ReactWrapper\n */\n\nvar ReactWrapper = function () {\n  function ReactWrapper(nodes, root) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    _classCallCheck(this, ReactWrapper);\n\n    if (!global.window && !global.document) {\n      throw new Error('It looks like you called `mount()` without a global document being loaded.');\n    }\n\n    if (!root) {\n      var ReactWrapperComponent = (0, _ReactWrapperComponent2['default'])(nodes, options);\n      this.component = (0, _reactCompat.renderWithOptions)(_react2['default'].createElement(ReactWrapperComponent, {\n        Component: nodes.type,\n        props: nodes.props,\n        context: options.context\n      }), options);\n      this.root = this;\n      this.node = this.component.getWrappedComponent();\n      this.nodes = [this.node];\n      this.length = 1;\n    } else {\n      this.component = null;\n      this.root = root;\n      if (!nodes) {\n        this.nodes = [];\n      } else if (!Array.isArray(nodes)) {\n        this.node = nodes;\n        this.nodes = [nodes];\n      } else {\n        this.node = nodes[0];\n        this.nodes = nodes;\n      }\n      this.length = this.nodes.length;\n    }\n    this.options = options;\n    this.complexSelector = new _ComplexSelector2['default'](_MountedTraversal.buildInstPredicate, findWhereUnwrapped, _MountedTraversal.childrenOfInst);\n  }\n\n  /**\n   * Returns the wrapped component.\n   *\n   * @return {ReactComponent}\n   */\n\n\n  _createClass(ReactWrapper, [{\n    key: 'getNode',\n    value: function () {\n      function getNode() {\n        if (this.length !== 1) {\n          throw new Error('ReactWrapper::getNode() can only be called when wrapping one node');\n        }\n        return this.nodes[0];\n      }\n\n      return getNode;\n    }()\n\n    /**\n     * Returns the the wrapped components.\n     *\n     * @return {Array<ReactComponent>}\n     */\n\n  }, {\n    key: 'getNodes',\n    value: function () {\n      function getNodes() {\n        return this.nodes;\n      }\n\n      return getNodes;\n    }()\n\n    /**\n     * Returns the outer most DOMComponent of the current wrapper.\n     *\n     * NOTE: can only be called on a wrapper of a single node.\n     *\n     * @returns {DOMComponent}\n     */\n\n  }, {\n    key: 'getDOMNode',\n    value: function () {\n      function getDOMNode() {\n        return this.single('getDOMNode', _reactCompat.findDOMNode);\n      }\n\n      return getDOMNode;\n    }()\n\n    /**\n     * If the root component contained a ref, you can access it here\n     * and get a wrapper around it.\n     *\n     * NOTE: can only be called on a wrapper instance that is also the root instance.\n     *\n     * @param {String} refname\n     * @returns {ReactWrapper}\n     */\n\n  }, {\n    key: 'ref',\n    value: function () {\n      function ref(refname) {\n        if (this.root !== this) {\n          throw new Error('ReactWrapper::ref(refname) can only be called on the root');\n        }\n        return this.wrap(this.instance().refs[refname]);\n      }\n\n      return ref;\n    }()\n\n    /**\n     * Gets the instance of the component being rendered as the root node passed into `mount()`.\n     *\n     * NOTE: can only be called on a wrapper instance that is also the root instance.\n     *\n     * Example:\n     * ```\n     * const wrapper = mount(<MyComponent />);\n     * const inst = wrapper.instance();\n     * expect(inst).to.be.instanceOf(MyComponent);\n     * ```\n     * @returns {ReactComponent}\n     */\n\n  }, {\n    key: 'instance',\n    value: function () {\n      function instance() {\n        if (this.root !== this) {\n          throw new Error('ReactWrapper::instance() can only be called on the root');\n        }\n        return this.component.getInstance();\n      }\n\n      return instance;\n    }()\n\n    /**\n     * Forces a re-render. Useful to run before checking the render output if something external\n     * may be updating the state of the component somewhere.\n     *\n     * NOTE: can only be called on a wrapper instance that is also the root instance.\n     *\n     * @returns {ReactWrapper}\n     */\n\n  }, {\n    key: 'update',\n    value: function () {\n      function update() {\n        var _this = this;\n\n        if (this.root !== this) {\n          // TODO(lmr): this requirement may not be necessary for the ReactWrapper\n          throw new Error('ReactWrapper::update() can only be called on the root');\n        }\n        this.single('update', function () {\n          _this.component.forceUpdate();\n        });\n        return this;\n      }\n\n      return update;\n    }()\n\n    /**\n     * A method that unmounts the component. This can be used to simulate a component going through\n     * and unmount/mount lifecycle.\n     *\n     * @returns {ReactWrapper}\n     */\n\n  }, {\n    key: 'unmount',\n    value: function () {\n      function unmount() {\n        var _this2 = this;\n\n        if (this.root !== this) {\n          throw new Error('ReactWrapper::unmount() can only be called on the root');\n        }\n        this.single('unmount', function () {\n          _this2.component.setState({ mount: false });\n        });\n        return this;\n      }\n\n      return unmount;\n    }()\n\n    /**\n     * A method that re-mounts the component. This can be used to simulate a component going through\n     * an unmount/mount lifecycle.\n     *\n     * @returns {ReactWrapper}\n     */\n\n  }, {\n    key: 'mount',\n    value: function () {\n      function mount() {\n        var _this3 = this;\n\n        if (this.root !== this) {\n          throw new Error('ReactWrapper::mount() can only be called on the root');\n        }\n        this.single('mount', function () {\n          _this3.component.setState({ mount: true });\n        });\n        return this;\n      }\n\n      return mount;\n    }()\n\n    /**\n     * A method that sets the props of the root component, and re-renders. Useful for when you are\n     * wanting to test how the component behaves over time with changing props. Calling this, for\n     * instance, will call the `componentWillReceiveProps` lifecycle method.\n     *\n     * Similar to `setState`, this method accepts a props object and will merge it in with the already\n     * existing props.\n     *\n     * NOTE: can only be called on a wrapper instance that is also the root instance.\n     *\n     * @param {Object} props object\n     * @param {Function} cb - callback function\n     * @returns {ReactWrapper}\n     */\n\n  }, {\n    key: 'setProps',\n    value: function () {\n      function setProps(props) {\n        var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n\n        if (this.root !== this) {\n          throw new Error('ReactWrapper::setProps() can only be called on the root');\n        }\n        this.component.setChildProps(props, callback);\n        return this;\n      }\n\n      return setProps;\n    }()\n\n    /**\n     * A method to invoke `setState` on the root component instance similar to how you might in the\n     * definition of the component, and re-renders.  This method is useful for testing your component\n     * in hard to achieve states, however should be used sparingly. If possible, you should utilize\n     * your component's external API in order to get it into whatever state you want to test, in order\n     * to be as accurate of a test as possible. This is not always practical, however.\n     *\n     * NOTE: can only be called on a wrapper instance that is also the root instance.\n     *\n     * @param {Object} state to merge\n     * @param {Function} cb - callback function\n     * @returns {ReactWrapper}\n     */\n\n  }, {\n    key: 'setState',\n    value: function () {\n      function setState(state) {\n        var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n\n        if (this.root !== this) {\n          throw new Error('ReactWrapper::setState() can only be called on the root');\n        }\n        this.instance().setState(state, callback);\n        return this;\n      }\n\n      return setState;\n    }()\n\n    /**\n     * A method that sets the context of the root component, and re-renders. Useful for when you are\n     * wanting to test how the component behaves over time with changing contexts.\n     *\n     * NOTE: can only be called on a wrapper instance that is also the root instance.\n     *\n     * @param {Object} context object\n     * @returns {ReactWrapper}\n     */\n\n  }, {\n    key: 'setContext',\n    value: function () {\n      function setContext(context) {\n        if (this.root !== this) {\n          throw new Error('ReactWrapper::setContext() can only be called on the root');\n        }\n        if (!this.options.context) {\n          throw new Error('ShallowWrapper::setContext() can only be called on a wrapper that was originally passed ' + 'a context option');\n        }\n        this.component.setChildContext(context);\n        return this;\n      }\n\n      return setContext;\n    }()\n\n    /**\n     * Whether or not a given react element matches the current render tree.\n     * It will determine if the wrapper root node \"looks like\" the expected\n     * element by checking if all props of the expected element are present\n     * on the wrapper root node and equals to each other.\n     *\n     * Example:\n     * ```\n     * // MyComponent outputs <div class=\"foo\">Hello</div>\n     * const wrapper = mount(<MyComponent />);\n     * expect(wrapper.matchesElement(<div>Hello</div>)).to.equal(true);\n     * ```\n     *\n     * @param {ReactElement} node\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: 'matchesElement',\n    value: function () {\n      function matchesElement(node) {\n        var _this4 = this;\n\n        return this.single('matchesElement', function () {\n          return (0, _MountedTraversal.instMatches)(node, _this4.getNode(), function (a, b) {\n            return a <= b;\n          });\n        });\n      }\n\n      return matchesElement;\n    }()\n\n    /**\n     * Whether or not a given react element exists in the mount render tree.\n     *\n     * Example:\n     * ```\n     * const wrapper = mount(<MyComponent />);\n     * expect(wrapper.contains(<div className=\"foo bar\" />)).to.equal(true);\n     * ```\n     *\n     * @param {ReactElement|Array<ReactElement>} nodeOrNodes\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: 'contains',\n    value: function () {\n      function contains(nodeOrNodes) {\n        var predicate = Array.isArray(nodeOrNodes) ? function (other) {\n          return (0, _Utils.containsChildrenSubArray)(_MountedTraversal.instEqual, other, nodeOrNodes);\n        } : function (other) {\n          return (0, _MountedTraversal.instEqual)(nodeOrNodes, other);\n        };\n        return findWhereUnwrapped(this, predicate).length > 0;\n      }\n\n      return contains;\n    }()\n\n    /**\n     * Whether or not a given react element exists in the current render tree.\n     * It will determine if one of the wrappers element \"looks like\" the expected\n     * element by checking if all props of the expected element are present\n     * on the wrappers element and equals to each other.\n     *\n     * Example:\n     * ```\n     * // MyComponent outputs <div><div class=\"foo\">Hello</div></div>\n     * const wrapper = mount(<MyComponent />);\n     * expect(wrapper.containsMatchingElement(<div>Hello</div>)).to.equal(true);\n     * ```\n     *\n     * @param {ReactElement} node\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: 'containsMatchingElement',\n    value: function () {\n      function containsMatchingElement(node) {\n        var predicate = function () {\n          function predicate(other) {\n            return (0, _MountedTraversal.instMatches)(node, other, function (a, b) {\n              return a <= b;\n            });\n          }\n\n          return predicate;\n        }();\n        return findWhereUnwrapped(this, predicate).length > 0;\n      }\n\n      return containsMatchingElement;\n    }()\n\n    /**\n     * Whether or not all the given react elements exists in the current render tree.\n     * It will determine if one of the wrappers element \"looks like\" the expected\n     * element by checking if all props of the expected element are present\n     * on the wrappers element and equals to each other.\n     *\n     * Example:\n     * ```\n     * const wrapper = mount(<MyComponent />);\n     * expect(wrapper.containsAllMatchingElements([\n     *   <div>Hello</div>,\n     *   <div>Goodbye</div>,\n     * ])).to.equal(true);\n     * ```\n     *\n     * @param {Array<ReactElement>} nodes\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: 'containsAllMatchingElements',\n    value: function () {\n      function containsAllMatchingElements(nodes) {\n        var invertedEquals = function () {\n          function invertedEquals(n1, n2) {\n            return (0, _MountedTraversal.instMatches)(n2, n1, function (a, b) {\n              return a <= b;\n            });\n          }\n\n          return invertedEquals;\n        }();\n        var predicate = function () {\n          function predicate(other) {\n            return (0, _Utils.containsChildrenSubArray)(invertedEquals, other, nodes);\n          }\n\n          return predicate;\n        }();\n        return findWhereUnwrapped(this, predicate).length > 0;\n      }\n\n      return containsAllMatchingElements;\n    }()\n\n    /**\n     * Whether or not one of the given react elements exists in the current render tree.\n     * It will determine if one of the wrappers element \"looks like\" the expected\n     * element by checking if all props of the expected element are present\n     * on the wrappers element and equals to each other.\n     *\n     * Example:\n     * ```\n     * const wrapper = mount(<MyComponent />);\n     * expect(wrapper.containsAnyMatchingElements([\n     *   <div>Hello</div>,\n     *   <div>Goodbye</div>,\n     * ])).to.equal(true);\n     * ```\n     *\n     * @param {Array<ReactElement>} nodes\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: 'containsAnyMatchingElements',\n    value: function () {\n      function containsAnyMatchingElements(nodes) {\n        var _this5 = this;\n\n        return Array.isArray(nodes) && nodes.some(function (node) {\n          return _this5.containsMatchingElement(node);\n        });\n      }\n\n      return containsAnyMatchingElements;\n    }()\n\n    /**\n     * Finds every node in the render tree of the current wrapper that matches the provided selector.\n     *\n     * @param {String|Function} selector\n     * @returns {ReactWrapper}\n     */\n\n  }, {\n    key: 'find',\n    value: function () {\n      function find(selector) {\n        return this.complexSelector.find(selector, this);\n      }\n\n      return find;\n    }()\n\n    /**\n     * Returns whether or not current node matches a provided selector.\n     *\n     * NOTE: can only be called on a wrapper of a single node.\n     *\n     * @param {String|Function} selector\n     * @returns {boolean}\n     */\n\n  }, {\n    key: 'is',\n    value: function () {\n      function is(selector) {\n        var predicate = (0, _MountedTraversal.buildInstPredicate)(selector);\n        return this.single('is', function (n) {\n          return predicate(n);\n        });\n      }\n\n      return is;\n    }()\n\n    /**\n     * Returns true if the component rendered nothing, i.e., null or false.\n     *\n     * @returns {boolean}\n     */\n\n  }, {\n    key: 'isEmptyRender',\n    value: function () {\n      function isEmptyRender() {\n        return this.single('isEmptyRender', function (n) {\n          // Stateful components and stateless function components have different internal structures,\n          // so we need to find the correct internal instance, and validate the rendered node type\n          // equals 2, which is the `ReactNodeTypes.EMPTY` value.\n          if (_version.REACT15) {\n            return (0, _MountedTraversal.internalInstanceOrComponent)(n)._renderedNodeType === 2;\n          }\n\n          return (0, _reactCompat.findDOMNode)(n) === null;\n        });\n      }\n\n      return isEmptyRender;\n    }()\n\n    /**\n     * Returns a new wrapper instance with only the nodes of the current wrapper instance that match\n     * the provided predicate function.\n     *\n     * @param {Function} predicate\n     * @returns {ReactWrapper}\n     */\n\n  }, {\n    key: 'filterWhere',\n    value: function () {\n      function filterWhere(predicate) {\n        var _this6 = this;\n\n        return filterWhereUnwrapped(this, function (n) {\n          return predicate(_this6.wrap(n));\n        });\n      }\n\n      return filterWhere;\n    }()\n\n    /**\n     * Returns a new wrapper instance with only the nodes of the current wrapper instance that match\n     * the provided selector.\n     *\n     * @param {String|Function} selector\n     * @returns {ReactWrapper}\n     */\n\n  }, {\n    key: 'filter',\n    value: function () {\n      function filter(selector) {\n        var predicate = (0, _MountedTraversal.buildInstPredicate)(selector);\n        return filterWhereUnwrapped(this, predicate);\n      }\n\n      return filter;\n    }()\n\n    /**\n     * Returns a new wrapper instance with only the nodes of the current wrapper that did not match\n     * the provided selector. Essentially the inverse of `filter`.\n     *\n     * @param {String|Function} selector\n     * @returns {ReactWrapper}\n     */\n\n  }, {\n    key: 'not',\n    value: function () {\n      function not(selector) {\n        var predicate = (0, _MountedTraversal.buildInstPredicate)(selector);\n        return filterWhereUnwrapped(this, function (n) {\n          return !predicate(n);\n        });\n      }\n\n      return not;\n    }()\n\n    /**\n     * Returns a string of the rendered text of the current render tree.  This function should be\n     * looked at with skepticism if being used to test what the actual HTML output of the component\n     * will be. If that is what you would like to test, use enzyme's `render` function instead.\n     *\n     * NOTE: can only be called on a wrapper of a single node.\n     *\n     * @returns {String}\n     */\n\n  }, {\n    key: 'text',\n    value: function () {\n      function text() {\n        return this.single('text', function (n) {\n          return (0, _reactCompat.findDOMNode)(n).textContent;\n        });\n      }\n\n      return text;\n    }()\n\n    /**\n     * Returns the HTML of the node.\n     *\n     * NOTE: can only be called on a wrapper of a single node.\n     *\n     * @returns {String}\n     */\n\n  }, {\n    key: 'html',\n    value: function () {\n      function html() {\n        return this.single('html', function (n) {\n          var node = (0, _reactCompat.findDOMNode)(n);\n          return node === null ? null : node.outerHTML.replace(/\\sdata-(reactid|reactroot)+=\"([^\"]*)+\"/g, '');\n        });\n      }\n\n      return html;\n    }()\n\n    /**\n     * Returns the current node rendered to HTML and wrapped in a CheerioWrapper.\n     *\n     * NOTE: can only be called on a wrapper of a single node.\n     *\n     * @returns {CheerioWrapper}\n     */\n\n  }, {\n    key: 'render',\n    value: function () {\n      function render() {\n        var html = this.html();\n        return html === null ? (0, _cheerio2['default'])() : _cheerio2['default'].load(html).root();\n      }\n\n      return render;\n    }()\n\n    /**\n     * Used to simulate events. Pass an eventname and (optionally) event arguments. This method of\n     * testing events should be met with some skepticism.\n     *\n     * @param {String} event\n     * @param {Object} mock (optional)\n     * @returns {ReactWrapper}\n     */\n\n  }, {\n    key: 'simulate',\n    value: function () {\n      function simulate(event) {\n        var mock = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n        this.single('simulate', function (n) {\n          var mappedEvent = (0, _Utils.mapNativeEventNames)(event);\n          var eventFn = _reactCompat.Simulate[mappedEvent];\n          if (!eventFn) {\n            throw new TypeError('ReactWrapper::simulate() event \\'' + String(event) + '\\' does not exist');\n          }\n\n          eventFn((0, _reactCompat.findDOMNode)(n), mock);\n        });\n        return this;\n      }\n\n      return simulate;\n    }()\n\n    /**\n     * Returns the props hash for the root node of the wrapper.\n     *\n     * NOTE: can only be called on a wrapper of a single node.\n     *\n     * @returns {Object}\n     */\n\n  }, {\n    key: 'props',\n    value: function () {\n      function props() {\n        return this.single('props', _Utils.propsOfNode);\n      }\n\n      return props;\n    }()\n\n    /**\n     * Returns the state hash for the root node of the wrapper. Optionally pass in a prop name and it\n     * will return just that value.\n     *\n     * NOTE: can only be called on a wrapper of a single node.\n     *\n     * @param {String} name (optional)\n     * @returns {*}\n     */\n\n  }, {\n    key: 'state',\n    value: function () {\n      function state(name) {\n        var _this7 = this;\n\n        if (this.root !== this) {\n          throw new Error('ReactWrapper::state() can only be called on the root');\n        }\n        var _state = this.single('state', function () {\n          return _this7.instance().state;\n        });\n        if (name !== undefined) {\n          return _state[name];\n        }\n        return _state;\n      }\n\n      return state;\n    }()\n\n    /**\n     * Returns the context hash for the root node of the wrapper.\n     * Optionally pass in a prop name and it will return just that value.\n     *\n     * NOTE: can only be called on a wrapper of a single node.\n     *\n     * @param {String} name (optional)\n     * @returns {*}\n     */\n\n  }, {\n    key: 'context',\n    value: function () {\n      function context(name) {\n        var _this8 = this;\n\n        if (this.root !== this) {\n          throw new Error('ReactWrapper::context() can only be called on the root');\n        }\n        var _context = this.single('context', function () {\n          return _this8.instance().context;\n        });\n        if (name !== undefined) {\n          return _context[name];\n        }\n        return _context;\n      }\n\n      return context;\n    }()\n\n    /**\n     * Returns a new wrapper with all of the children of the current wrapper.\n     *\n     * @param {String|Function} [selector]\n     * @returns {ReactWrapper}\n     */\n\n  }, {\n    key: 'children',\n    value: function () {\n      function children(selector) {\n        var allChildren = this.flatMap(function (n) {\n          return (0, _MountedTraversal.childrenOfInst)(n.getNode());\n        });\n        return selector ? allChildren.filter(selector) : allChildren;\n      }\n\n      return children;\n    }()\n\n    /**\n     * Returns a new wrapper with a specific child\n     *\n     * @param {Number} [index]\n     * @returns {ReactWrapper}\n     */\n\n  }, {\n    key: 'childAt',\n    value: function () {\n      function childAt(index) {\n        var _this9 = this;\n\n        return this.single('childAt', function () {\n          return _this9.children().at(index);\n        });\n      }\n\n      return childAt;\n    }()\n\n    /**\n     * Returns a wrapper around all of the parents/ancestors of the wrapper. Does not include the node\n     * in the current wrapper.\n     *\n     * NOTE: can only be called on a wrapper of a single node.\n     *\n     * @param {String|Function} [selector]\n     * @returns {ReactWrapper}\n     */\n\n  }, {\n    key: 'parents',\n    value: function () {\n      function parents(selector) {\n        var _this10 = this;\n\n        var allParents = this.wrap(this.single('parents', function (n) {\n          return (0, _MountedTraversal.parentsOfInst)(n, _this10.root.getNode());\n        }));\n        return selector ? allParents.filter(selector) : allParents;\n      }\n\n      return parents;\n    }()\n\n    /**\n     * Returns a wrapper around the immediate parent of the current node.\n     *\n     * @returns {ReactWrapper}\n     */\n\n  }, {\n    key: 'parent',\n    value: function () {\n      function parent() {\n        return this.flatMap(function (n) {\n          return [n.parents().get(0)];\n        });\n      }\n\n      return parent;\n    }()\n\n    /**\n     *\n     * @param {String|Function} selector\n     * @returns {ReactWrapper}\n     */\n\n  }, {\n    key: 'closest',\n    value: function () {\n      function closest(selector) {\n        return this.is(selector) ? this : this.parents().filter(selector).first();\n      }\n\n      return closest;\n    }()\n\n    /**\n     * Returns the value of  prop with the given name of the root node.\n     *\n     * @param {String} propName\n     * @returns {*}\n     */\n\n  }, {\n    key: 'prop',\n    value: function () {\n      function prop(propName) {\n        return this.props()[propName];\n      }\n\n      return prop;\n    }()\n\n    /**\n     * Returns the key assigned to the current node.\n     *\n     * @returns {String}\n     */\n\n  }, {\n    key: 'key',\n    value: function () {\n      function key() {\n        return this.single('key', function (n) {\n          return (0, _MountedTraversal.getNode)(n).key;\n        });\n      }\n\n      return key;\n    }()\n\n    /**\n     * Returns the type of the root node of this wrapper. If it's a composite component, this will be\n     * the component constructor. If it's native DOM node, it will be a string.\n     *\n     * @returns {String|Function}\n     */\n\n  }, {\n    key: 'type',\n    value: function () {\n      function type() {\n        return this.single('type', function (n) {\n          return (0, _Utils.typeOfNode)((0, _MountedTraversal.getNode)(n));\n        });\n      }\n\n      return type;\n    }()\n\n    /**\n     * Returns the name of the root node of this wrapper.\n     *\n     * In order of precedence => type.displayName -> type.name -> type.\n     *\n     * @returns {String}\n     */\n\n  }, {\n    key: 'name',\n    value: function () {\n      function name() {\n        return this.single('name', function (n) {\n          return (0, _Utils.displayNameOfNode)((0, _MountedTraversal.getNode)(n));\n        });\n      }\n\n      return name;\n    }()\n\n    /**\n     * Returns whether or not the current root node has the given class name or not.\n     *\n     * NOTE: can only be called on a wrapper of a single node.\n     *\n     * @param {String} className\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: 'hasClass',\n    value: function () {\n      function hasClass(className) {\n        if (className && className.indexOf('.') !== -1) {\n          // eslint-disable-next-line no-console\n          console.warn('It looks like you\\'re calling `ReactWrapper::hasClass()` with a CSS selector. ' + 'hasClass() expects a class name, not a CSS selector.');\n        }\n        return this.single('hasClass', function (n) {\n          return (0, _MountedTraversal.instHasClassName)(n, className);\n        });\n      }\n\n      return hasClass;\n    }()\n\n    /**\n     * Iterates through each node of the current wrapper and executes the provided function with a\n     * wrapper around the corresponding node passed in as the first argument.\n     *\n     * @param {Function} fn\n     * @returns {ReactWrapper}\n     */\n\n  }, {\n    key: 'forEach',\n    value: function () {\n      function forEach(fn) {\n        var _this11 = this;\n\n        this.getNodes().forEach(function (n, i) {\n          return fn.call(_this11, _this11.wrap(n), i);\n        });\n        return this;\n      }\n\n      return forEach;\n    }()\n\n    /**\n     * Maps the current array of nodes to another array. Each node is passed in as a `ReactWrapper`\n     * to the map function.\n     *\n     * @param {Function} fn\n     * @returns {Array}\n     */\n\n  }, {\n    key: 'map',\n    value: function () {\n      function map(fn) {\n        var _this12 = this;\n\n        return this.getNodes().map(function (n, i) {\n          return fn.call(_this12, _this12.wrap(n), i);\n        });\n      }\n\n      return map;\n    }()\n\n    /**\n     * Reduces the current array of nodes to another array.\n     * Each node is passed in as a `ShallowWrapper` to the reducer function.\n     *\n     * @param {Function} fn - the reducer function\n     * @param {*} initialValue - the initial value\n     * @returns {*}\n     */\n\n  }, {\n    key: 'reduce',\n    value: function () {\n      function reduce(fn, initialValue) {\n        var _this13 = this;\n\n        return this.getNodes().reduce(function (accum, n, i) {\n          return fn.call(_this13, accum, _this13.wrap(n), i);\n        }, initialValue);\n      }\n\n      return reduce;\n    }()\n\n    /**\n     * Reduces the current array of nodes to another array, from right to left. Each node is passed\n     * in as a `ShallowWrapper` to the reducer function.\n     *\n     * @param {Function} fn - the reducer function\n     * @param {*} initialValue - the initial value\n     * @returns {*}\n     */\n\n  }, {\n    key: 'reduceRight',\n    value: function () {\n      function reduceRight(fn, initialValue) {\n        var _this14 = this;\n\n        return this.getNodes().reduceRight(function (accum, n, i) {\n          return fn.call(_this14, accum, _this14.wrap(n), i);\n        }, initialValue);\n      }\n\n      return reduceRight;\n    }()\n\n    /**\n     * Returns a new wrapper with a subset of the nodes of the original wrapper, according to the\n     * rules of `Array#slice`.\n     *\n     * @param {Number} begin\n     * @param {Number} end\n     * @returns {ShallowWrapper}\n     */\n\n  }, {\n    key: 'slice',\n    value: function () {\n      function slice(begin, end) {\n        return this.wrap(this.getNodes().slice(begin, end));\n      }\n\n      return slice;\n    }()\n\n    /**\n     * Returns whether or not any of the nodes in the wrapper match the provided selector.\n     *\n     * @param {Function|String} selector\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: 'some',\n    value: function () {\n      function some(selector) {\n        if (this.root === this) {\n          throw new Error('ReactWrapper::some() can not be called on the root');\n        }\n        var predicate = (0, _MountedTraversal.buildInstPredicate)(selector);\n        return this.getNodes().some(predicate);\n      }\n\n      return some;\n    }()\n\n    /**\n     * Returns whether or not any of the nodes in the wrapper pass the provided predicate function.\n     *\n     * @param {Function} predicate\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: 'someWhere',\n    value: function () {\n      function someWhere(predicate) {\n        var _this15 = this;\n\n        return this.getNodes().some(function (n, i) {\n          return predicate.call(_this15, _this15.wrap(n), i);\n        });\n      }\n\n      return someWhere;\n    }()\n\n    /**\n     * Returns whether or not all of the nodes in the wrapper match the provided selector.\n     *\n     * @param {Function|String} selector\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: 'every',\n    value: function () {\n      function every(selector) {\n        var predicate = (0, _MountedTraversal.buildInstPredicate)(selector);\n        return this.getNodes().every(predicate);\n      }\n\n      return every;\n    }()\n\n    /**\n     * Returns whether or not any of the nodes in the wrapper pass the provided predicate function.\n     *\n     * @param {Function} predicate\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: 'everyWhere',\n    value: function () {\n      function everyWhere(predicate) {\n        var _this16 = this;\n\n        return this.getNodes().every(function (n, i) {\n          return predicate.call(_this16, _this16.wrap(n), i);\n        });\n      }\n\n      return everyWhere;\n    }()\n\n    /**\n     * Utility method used to create new wrappers with a mapping function that returns an array of\n     * nodes in response to a single node wrapper. The returned wrapper is a single wrapper around\n     * all of the mapped nodes flattened (and de-duplicated).\n     *\n     * @param {Function} fn\n     * @returns {ReactWrapper}\n     */\n\n  }, {\n    key: 'flatMap',\n    value: function () {\n      function flatMap(fn) {\n        var _this17 = this;\n\n        var nodes = this.getNodes().map(function (n, i) {\n          return fn.call(_this17, _this17.wrap(n), i);\n        });\n        var flattened = (0, _flatten2['default'])(nodes, true);\n        var uniques = (0, _uniq2['default'])(flattened);\n        var compacted = (0, _compact2['default'])(uniques);\n        return this.wrap(compacted);\n      }\n\n      return flatMap;\n    }()\n\n    /**\n     * Finds all nodes in the current wrapper nodes' render trees that match the provided predicate\n     * function.\n     *\n     * @param {Function} predicate\n     * @returns {ReactWrapper}\n     */\n\n  }, {\n    key: 'findWhere',\n    value: function () {\n      function findWhere(predicate) {\n        var _this18 = this;\n\n        return findWhereUnwrapped(this, function (n) {\n          return predicate(_this18.wrap(n));\n        });\n      }\n\n      return findWhere;\n    }()\n\n    /**\n     * Returns the node at a given index of the current wrapper.\n     *\n     * @param {Number} index\n     * @returns {ReactElement}\n     */\n\n  }, {\n    key: 'get',\n    value: function () {\n      function get(index) {\n        return this.getNodes()[index];\n      }\n\n      return get;\n    }()\n\n    /**\n     * Returns a wrapper around the node at a given index of the current wrapper.\n     *\n     * @param {Number} index\n     * @returns {ReactWrapper}\n     */\n\n  }, {\n    key: 'at',\n    value: function () {\n      function at(index) {\n        return this.wrap(this.getNodes()[index]);\n      }\n\n      return at;\n    }()\n\n    /**\n     * Returns a wrapper around the first node of the current wrapper.\n     *\n     * @returns {ReactWrapper}\n     */\n\n  }, {\n    key: 'first',\n    value: function () {\n      function first() {\n        return this.at(0);\n      }\n\n      return first;\n    }()\n\n    /**\n     * Returns a wrapper around the last node of the current wrapper.\n     *\n     * @returns {ReactWrapper}\n     */\n\n  }, {\n    key: 'last',\n    value: function () {\n      function last() {\n        return this.at(this.length - 1);\n      }\n\n      return last;\n    }()\n\n    /**\n     * Delegates to exists()\n     *\n     * @returns {boolean}\n     */\n\n  }, {\n    key: 'isEmpty',\n    value: function () {\n      function isEmpty() {\n        // eslint-disable-next-line no-console\n        console.warn('Enzyme::Deprecated method isEmpty() called, use exists() instead.');\n        return !this.exists();\n      }\n\n      return isEmpty;\n    }()\n\n    /**\n     * Returns true if the current wrapper has nodes. False otherwise.\n     *\n     * @returns {boolean}\n     */\n\n  }, {\n    key: 'exists',\n    value: function () {\n      function exists() {\n        return this.length > 0;\n      }\n\n      return exists;\n    }()\n\n    /**\n     * Utility method that throws an error if the current instance has a length other than one.\n     * This is primarily used to enforce that certain methods are only run on a wrapper when it is\n     * wrapping a single node.\n     *\n     * @param {Function} fn\n     * @returns {*}\n     */\n\n  }, {\n    key: 'single',\n    value: function () {\n      function single(name, fn) {\n        var fnName = typeof name === 'string' ? name : 'unknown';\n        var callback = typeof fn === 'function' ? fn : name;\n        if (this.length !== 1) {\n          throw new Error('Method \\u201C' + fnName + '\\u201D is only meant to be run on a single node. ' + String(this.length) + ' found instead.');\n        }\n        return callback.call(this, this.getNode());\n      }\n\n      return single;\n    }()\n\n    /**\n     * Helpful utility method to create a new wrapper with the same root as the current wrapper, with\n     * any nodes passed in as the first parameter automatically wrapped.\n     *\n     * @param {ReactWrapper|ReactElement|Array<ReactElement>} node\n     * @returns {ReactWrapper}\n     */\n\n  }, {\n    key: 'wrap',\n    value: function () {\n      function wrap(node) {\n        if (node instanceof ReactWrapper) {\n          return node;\n        }\n        return new ReactWrapper(node, this.root);\n      }\n\n      return wrap;\n    }()\n\n    /**\n     * Returns an HTML-like string of the shallow render for debugging purposes.\n     *\n     * @returns {String}\n     */\n\n  }, {\n    key: 'debug',\n    value: function () {\n      function debug() {\n        return (0, _Debug.debugInsts)(this.getNodes());\n      }\n\n      return debug;\n    }()\n\n    /**\n     * Invokes intercepter and returns itself. intercepter is called with itself.\n     * This is helpful when debugging nodes in method chains.\n     * @param fn\n     * @returns {ReactWrapper}\n     */\n\n  }, {\n    key: 'tap',\n    value: function () {\n      function tap(intercepter) {\n        intercepter(this);\n        return this;\n      }\n\n      return tap;\n    }()\n\n    /**\n     * Detaches the react tree from the DOM. Runs `ReactDOM.unmountComponentAtNode()` under the hood.\n     *\n     * This method will most commonly be used as a \"cleanup\" method if you decide to use the\n     * `attachTo` option in `mount(node, options)`.\n     *\n     * The method is intentionally not \"fluent\" (in that it doesn't return `this`) because you should\n     * not be doing anything with this wrapper after this method is called.\n     */\n\n  }, {\n    key: 'detach',\n    value: function () {\n      function detach() {\n        if (this.root !== this) {\n          throw new Error('ReactWrapper::detach() can only be called on the root');\n        }\n        if (!this.options.attachTo) {\n          throw new Error('ReactWrapper::detach() can only be called on when the `attachTo` option was passed into ' + '`mount()`.');\n        }\n        (0, _reactCompat.unmountComponentAtNode)(this.options.attachTo);\n      }\n\n      return detach;\n    }()\n  }]);\n\n  return ReactWrapper;\n}();\n\nif (_Utils.ITERATOR_SYMBOL) {\n  Object.defineProperty(ReactWrapper.prototype, _Utils.ITERATOR_SYMBOL, {\n    configurable: true,\n    value: function () {\n      function iterator() {\n        return this.nodes[_Utils.ITERATOR_SYMBOL]();\n      }\n\n      return iterator;\n    }()\n  });\n}\n\nexports['default'] = ReactWrapper;","/home/travis/build/npmtest/node-npmtest-enzyme/node_modules/enzyme/build/ComplexSelector.js":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _split = require('lodash/split');\n\nvar _split2 = _interopRequireDefault(_split);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar ComplexSelector = function () {\n  function ComplexSelector(buildPredicate, findWhereUnwrapped, childrenOfNode) {\n    _classCallCheck(this, ComplexSelector);\n\n    this.buildPredicate = buildPredicate;\n    this.findWhereUnwrapped = findWhereUnwrapped;\n    this.childrenOfNode = childrenOfNode;\n  }\n\n  _createClass(ComplexSelector, [{\n    key: 'getSelectors',\n    value: function () {\n      function getSelectors(selector) {\n        // eslint-disable-line class-methods-use-this\n        var selectors = (0, _split2['default'])(selector, / (?=(?:(?:[^\"]*\"){2})*[^\"]*$)/);\n        return selectors.reduce(function (list, sel) {\n          if (sel === '+' || sel === '~') {\n            var temp = list.pop();\n            return list.concat(sel, temp);\n          }\n\n          return list.concat(sel);\n        }, []);\n      }\n\n      return getSelectors;\n    }()\n  }, {\n    key: 'handleSelectors',\n    value: function () {\n      function handleSelectors(selectors, wrapper) {\n        var _this = this;\n\n        var recurseSelector = function () {\n          function recurseSelector(offset, fn, pre) {\n            var predicate = pre || _this.buildPredicate(selectors[offset]);\n            var nextWrapper = _this.findWhereUnwrapped(wrapper, predicate, fn);\n            var nextSelectors = selectors.slice(offset + 1);\n            return _this.handleSelectors(nextSelectors, nextWrapper);\n          }\n\n          return recurseSelector;\n        }();\n\n        var buildSiblingPredicate = function () {\n          function buildSiblingPredicate(first, second) {\n            var firstPredicate = _this.buildPredicate(first);\n            var secondPredicate = _this.buildPredicate(second);\n\n            return function (child) {\n              if (firstPredicate(child)) {\n                return function (sibling) {\n                  return secondPredicate(sibling);\n                };\n              }\n\n              return false;\n            };\n          }\n\n          return buildSiblingPredicate;\n        }();\n\n        var predicate = void 0;\n        var selectSiblings = void 0;\n\n        if (selectors.length) {\n          switch (selectors[0]) {\n            case '>':\n              return recurseSelector(1, this.treeFilterDirect());\n            case '+':\n              predicate = buildSiblingPredicate(selectors[1], selectors[2]);\n              selectSiblings = function () {\n                function selectSiblings(children, pre, results, idx) {\n                  var adjacent = children[idx + 1];\n                  if (pre(adjacent)) {\n                    results.push(adjacent);\n                  }\n                }\n\n                return selectSiblings;\n              }();\n\n              return recurseSelector(2, this.treeFindSiblings(selectSiblings), predicate);\n            case '~':\n              predicate = buildSiblingPredicate(selectors[1], selectors[2]);\n              selectSiblings = function () {\n                function selectSiblings(children, pre, results, idx) {\n                  return children.slice(idx + 1).map(function (child) {\n                    return pre(child) ? results.push(child) : null;\n                  });\n                }\n\n                return selectSiblings;\n              }();\n\n              return recurseSelector(2, this.treeFindSiblings(selectSiblings), predicate);\n            default:\n              return recurseSelector(0);\n          }\n        }\n\n        return wrapper;\n      }\n\n      return handleSelectors;\n    }()\n  }, {\n    key: 'find',\n    value: function () {\n      function find(selector, wrapper) {\n        if (typeof selector === 'string') {\n          var selectors = this.getSelectors(selector);\n\n          return this.handleSelectors(selectors, wrapper);\n        }\n\n        var predicate = this.buildPredicate(selector);\n        return this.findWhereUnwrapped(wrapper, predicate);\n      }\n\n      return find;\n    }()\n  }, {\n    key: 'treeFilterDirect',\n    value: function () {\n      function treeFilterDirect() {\n        var _this2 = this;\n\n        return function (tree, fn) {\n          return _this2.childrenOfNode(tree).filter(function (child) {\n            return fn(child);\n          });\n        };\n      }\n\n      return treeFilterDirect;\n    }()\n  }, {\n    key: 'treeFindSiblings',\n    value: function () {\n      function treeFindSiblings(selectSiblings) {\n        var _this3 = this;\n\n        return function (tree, fn) {\n          var results = [];\n          var list = [_this3.childrenOfNode(tree)];\n\n          var traverseChildren = function () {\n            function traverseChildren(children) {\n              return children.forEach(function (child, i) {\n                var secondPredicate = fn(child);\n\n                list.push(_this3.childrenOfNode(child));\n\n                if (secondPredicate) {\n                  selectSiblings(children, secondPredicate, results, i);\n                }\n              });\n            }\n\n            return traverseChildren;\n          }();\n\n          while (list.length) {\n            traverseChildren(list.shift());\n          }\n\n          return results;\n        };\n      }\n\n      return treeFindSiblings;\n    }()\n  }]);\n\n  return ComplexSelector;\n}();\n\nexports['default'] = ComplexSelector;","/home/travis/build/npmtest/node-npmtest-enzyme/node_modules/enzyme/build/ReactWrapperComponent.js":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nexports['default'] = createWrapperComponent;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _object = require('object.assign');\n\nvar _object2 = _interopRequireDefault(_object);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/* eslint react/forbid-prop-types: 0 */\n\n/**\n * This is a utility component to wrap around the nodes we are\n * passing in to `mount()`. Theoretically, you could do everything\n * we are doing without this, but this makes it easier since\n * `renderIntoDocument()` doesn't really pass back a reference to\n * the DOM node it rendered to, so we can't really \"re-render\" to\n * pass new props in.\n */\nfunction createWrapperComponent(node) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var WrapperComponent = function (_React$Component) {\n    _inherits(WrapperComponent, _React$Component);\n\n    function WrapperComponent() {\n      var _ref;\n\n      _classCallCheck(this, WrapperComponent);\n\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      var _this = _possibleConstructorReturn(this, (_ref = WrapperComponent.__proto__ || Object.getPrototypeOf(WrapperComponent)).call.apply(_ref, [this].concat(args)));\n\n      _this.state = {\n        mount: true,\n        props: _this.props.props,\n        context: _this.props.context\n      };\n      return _this;\n    }\n\n    _createClass(WrapperComponent, [{\n      key: 'setChildProps',\n      value: function () {\n        function setChildProps(newProps) {\n          var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n\n          var props = (0, _object2['default'])({}, this.state.props, newProps);\n          this.setState({ props: props }, callback);\n        }\n\n        return setChildProps;\n      }()\n    }, {\n      key: 'getInstance',\n      value: function () {\n        function getInstance() {\n          var component = this._reactInternalInstance._renderedComponent;\n          var inst = component.getPublicInstance();\n          if (inst === null) {\n            return component._instance;\n          }\n          return inst;\n        }\n\n        return getInstance;\n      }()\n    }, {\n      key: 'getWrappedComponent',\n      value: function () {\n        function getWrappedComponent() {\n          var component = this._reactInternalInstance._renderedComponent;\n          var inst = component.getPublicInstance();\n          if (inst === null) {\n            return component._instance;\n          }\n          return inst;\n        }\n\n        return getWrappedComponent;\n      }()\n    }, {\n      key: 'setChildContext',\n      value: function () {\n        function setChildContext(context) {\n          var _this2 = this;\n\n          return new Promise(function (resolve) {\n            return _this2.setState({ context: context }, resolve);\n          });\n        }\n\n        return setChildContext;\n      }()\n    }, {\n      key: 'render',\n      value: function () {\n        function render() {\n          var Component = this.props.Component;\n          var _state = this.state,\n              mount = _state.mount,\n              props = _state.props;\n\n          if (!mount) return null;\n          return _react2['default'].createElement(Component, props);\n        }\n\n        return render;\n      }()\n    }]);\n\n    return WrapperComponent;\n  }(_react2['default'].Component);\n\n  WrapperComponent.propTypes = {\n    Component: _propTypes2['default'].oneOfType([_propTypes2['default'].func, _propTypes2['default'].string]).isRequired,\n    props: _propTypes2['default'].object.isRequired,\n    context: _propTypes2['default'].object\n  };\n  WrapperComponent.defaultProps = {\n    context: null\n  };\n\n  if (options.context && (node.type.contextTypes || options.childContextTypes)) {\n    // For full rendering, we are using this wrapper component to provide context if it is\n    // specified in both the options AND the child component defines `contextTypes` statically\n    // OR the merged context types for all children (the node component or deeper children) are\n    // specified in options parameter under childContextTypes.\n    // In that case, we define both a `getChildContext()` function and a `childContextTypes` prop.\n    var childContextTypes = node.type.contextTypes || {};\n    if (options.childContextTypes) {\n      (0, _object2['default'])(childContextTypes, options.childContextTypes);\n    }\n    WrapperComponent.prototype.getChildContext = function () {\n      function getChildContext() {\n        return this.state.context;\n      }\n\n      return getChildContext;\n    }();\n    WrapperComponent.childContextTypes = childContextTypes;\n  }\n  return WrapperComponent;\n}","/home/travis/build/npmtest/node-npmtest-enzyme/node_modules/enzyme/build/MountedTraversal.js":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nexports.getNode = getNode;\nexports.instEqual = instEqual;\nexports.instMatches = instMatches;\nexports.instHasClassName = instHasClassName;\nexports.instHasId = instHasId;\nexports.instHasType = instHasType;\nexports.instHasProperty = instHasProperty;\nexports.renderedChildrenOfInst = renderedChildrenOfInst;\nexports.childrenOfInstInternal = childrenOfInstInternal;\nexports.internalInstanceOrComponent = internalInstanceOrComponent;\nexports.childrenOfInst = childrenOfInst;\nexports.treeFilter = treeFilter;\nexports.pathToNode = pathToNode;\nexports.parentsOfInst = parentsOfInst;\nexports.instMatchesObjectProps = instMatchesObjectProps;\nexports.buildInstPredicate = buildInstPredicate;\n\nvar _isEmpty = require('lodash/isEmpty');\n\nvar _isEmpty2 = _interopRequireDefault(_isEmpty);\n\nvar _object = require('object.values');\n\nvar _object2 = _interopRequireDefault(_object);\n\nvar _isSubset = require('is-subset');\n\nvar _isSubset2 = _interopRequireDefault(_isSubset);\n\nvar _Utils = require('./Utils');\n\nvar _reactCompat = require('./react-compat');\n\nvar _version = require('./version');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction getNode(inst) {\n  if (!inst || inst._store || typeof inst === 'string') {\n    return inst;\n  }\n  if (inst._currentElement) {\n    return inst._currentElement;\n  }\n  if ((0, _Utils.internalInstance)(inst)) {\n    return (0, _Utils.internalInstance)(inst)._currentElement;\n  }\n  if (inst._reactInternalInstance) {\n    return inst._reactInternalInstance._currentElement;\n  }\n  if (inst._reactInternalComponent) {\n    return inst._reactInternalComponent._currentElement;\n  }\n  return inst;\n}\n\nfunction instEqual(a, b, lenComp) {\n  return (0, _Utils.nodeEqual)(getNode(a), getNode(b), lenComp);\n}\n\nfunction instMatches(a, b, lenComp) {\n  return (0, _Utils.nodeMatches)(getNode(a), getNode(b), lenComp);\n}\n\nfunction instHasClassName(inst, className) {\n  var node = (0, _reactCompat.findDOMNode)(inst);\n  if (node === null) {\n    // inst renders null\n    return false;\n  }\n  if (node.classList) {\n    return node.classList.contains(className);\n  }\n  var classes = node.className || '';\n  if ((typeof classes === 'undefined' ? 'undefined' : _typeof(classes)) === 'object') {\n    classes = classes.baseVal;\n  }\n  classes = classes.replace(/\\s/g, ' ');\n  return (' ' + String(classes) + ' ').indexOf(' ' + String(className) + ' ') > -1;\n}\n\nfunction hasClassName(inst, className) {\n  if (!(0, _reactCompat.isDOMComponent)(inst)) {\n    return false;\n  }\n  return instHasClassName(inst, className);\n}\n\nfunction instHasId(inst, id) {\n  if (!(0, _reactCompat.isDOMComponent)(inst)) return false;\n  var instId = (0, _reactCompat.findDOMNode)(inst).id || '';\n  return instId === id;\n}\n\nfunction isFunctionalComponentWithType(inst, func) {\n  return (0, _Utils.isFunctionalComponent)(inst) && getNode(inst).type === func;\n}\n\nfunction instHasType(inst, type) {\n  switch (typeof type === 'undefined' ? 'undefined' : _typeof(type)) {\n    case 'string':\n      return (0, _Utils.nodeHasType)(getNode(inst), type);\n    case 'function':\n      return (0, _reactCompat.isCompositeComponentWithType)(inst, type) || isFunctionalComponentWithType(inst, type);\n    default:\n      return false;\n  }\n}\n\nfunction instHasProperty(inst, propKey, stringifiedPropValue) {\n  if (!(0, _reactCompat.isDOMComponent)(inst)) return false;\n\n  var node = getNode(inst);\n\n  return (0, _Utils.nodeHasProperty)(node, propKey, stringifiedPropValue);\n}\n\n// called with private inst\nfunction renderedChildrenOfInst(inst) {\n  return _version.REACT013 ? inst._renderedComponent._renderedChildren : inst._renderedChildren;\n}\n\n// called with a private instance\nfunction childrenOfInstInternal(inst) {\n  if (!inst) {\n    return [];\n  }\n  if (!inst.getPublicInstance) {\n    var internal = (0, _Utils.internalInstance)(inst);\n    return childrenOfInstInternal(internal);\n  }\n\n  var publicInst = inst.getPublicInstance();\n  var currentElement = inst._currentElement;\n  if ((0, _reactCompat.isDOMComponent)(publicInst)) {\n    var renderedChildren = renderedChildrenOfInst(inst);\n    return (0, _object2['default'])(renderedChildren || {}).filter(function (node) {\n      if (_version.REACT013 && !node.getPublicInstance) {\n        return false;\n      }\n      if (typeof node._stringText !== 'undefined') {\n        return false;\n      }\n      return true;\n    }).map(function (node) {\n      if (!_version.REACT013 && typeof node._currentElement.type === 'function') {\n        return node._instance;\n      }\n      if (typeof node._stringText === 'string') {\n        return node;\n      }\n      return node.getPublicInstance();\n    });\n  } else if (!_version.REACT013 && (0, _reactCompat.isElement)(currentElement) && typeof currentElement.type === 'function') {\n    return childrenOfInstInternal(inst._renderedComponent);\n  } else if (_version.REACT013 && (0, _reactCompat.isCompositeComponent)(publicInst)) {\n    return childrenOfInstInternal(inst._renderedComponent);\n  }\n  return [];\n}\n\nfunction internalInstanceOrComponent(node) {\n  if (_version.REACT013) {\n    return node;\n  } else if (node._reactInternalComponent) {\n    return node._reactInternalComponent;\n  } else if (node._reactInternalInstance) {\n    return node._reactInternalInstance;\n  }\n  return node;\n}\n\nfunction childrenOfInst(node) {\n  return childrenOfInstInternal(internalInstanceOrComponent(node));\n}\n\n// This function should be called with an \"internal instance\". Nevertheless, if it is\n// called with a \"public instance\" instead, the function will call itself with the\n// internal instance and return the proper result.\nfunction findAllInRenderedTreeInternal(inst, test) {\n  if (!inst) {\n    return [];\n  }\n\n  if (!inst.getPublicInstance) {\n    var internal = (0, _Utils.internalInstance)(inst);\n    return findAllInRenderedTreeInternal(internal, test);\n  }\n  var publicInst = inst.getPublicInstance() || inst._instance;\n  var ret = test(publicInst) ? [publicInst] : [];\n  var currentElement = inst._currentElement;\n  if ((0, _reactCompat.isDOMComponent)(publicInst)) {\n    var renderedChildren = renderedChildrenOfInst(inst);\n    (0, _object2['default'])(renderedChildren || {}).filter(function (node) {\n      if (_version.REACT013 && !node.getPublicInstance) {\n        return false;\n      }\n      return true;\n    }).forEach(function (node) {\n      ret = ret.concat(findAllInRenderedTreeInternal(node, test));\n    });\n  } else if (!_version.REACT013 && (0, _reactCompat.isElement)(currentElement) && typeof currentElement.type === 'function') {\n    ret = ret.concat(findAllInRenderedTreeInternal(inst._renderedComponent, test));\n  } else if (_version.REACT013 && (0, _reactCompat.isCompositeComponent)(publicInst)) {\n    ret = ret.concat(findAllInRenderedTreeInternal(inst._renderedComponent, test));\n  }\n  return ret;\n}\n\n// This function could be called with a number of different things technically, so we need to\n// pass the *right* thing to our internal helper.\nfunction treeFilter(node, test) {\n  return findAllInRenderedTreeInternal(internalInstanceOrComponent(node), test);\n}\n\nfunction pathFilter(path, fn) {\n  return path.filter(function (tree) {\n    return treeFilter(tree, fn).length !== 0;\n  });\n}\n\nfunction pathToNode(node, root) {\n  var queue = [root];\n  var path = [];\n\n  var hasNode = function hasNode(testNode) {\n    return node === testNode;\n  };\n\n  while (queue.length) {\n    var current = queue.pop();\n    var children = childrenOfInst(current);\n\n    if (current === node) return pathFilter(path, hasNode);\n\n    path.push(current);\n\n    if (children.length === 0) {\n      // leaf node. if it isn't the node we are looking for, we pop.\n      path.pop();\n    }\n    queue.push.apply(queue, _toConsumableArray(children));\n  }\n\n  return null;\n}\n\nfunction parentsOfInst(inst, root) {\n  return pathToNode(inst, root).reverse();\n}\n\nfunction instMatchesObjectProps(inst, props) {\n  if (!(0, _reactCompat.isDOMComponent)(inst)) return false;\n  var node = getNode(inst);\n  return (0, _isSubset2['default'])((0, _Utils.propsOfNode)(node), props);\n}\n\nfunction buildInstPredicate(selector) {\n  switch (typeof selector === 'undefined' ? 'undefined' : _typeof(selector)) {\n    case 'function':\n      // selector is a component constructor\n      return function (inst) {\n        return instHasType(inst, selector);\n      };\n\n    case 'string':\n      if (_Utils.isCompoundSelector.test(selector)) {\n        return (0, _Utils.AND)((0, _Utils.splitSelector)(selector).map(buildInstPredicate));\n      }\n\n      switch ((0, _Utils.selectorType)(selector)) {\n        case _Utils.SELECTOR.CLASS_TYPE:\n          return function (inst) {\n            return hasClassName(inst, selector.slice(1));\n          };\n        case _Utils.SELECTOR.ID_TYPE:\n          return function (inst) {\n            return instHasId(inst, selector.slice(1));\n          };\n        case _Utils.SELECTOR.PROP_TYPE:\n          {\n            var _ret = function () {\n              var propKey = selector.split(/\\[([a-zA-Z][a-zA-Z_\\d\\-:]*?)(=|])/)[1];\n              var propValue = selector.split(/=(.*?)]/)[1];\n\n              return {\n                v: function () {\n                  function v(node) {\n                    return instHasProperty(node, propKey, propValue);\n                  }\n\n                  return v;\n                }()\n              };\n            }();\n\n            if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === \"object\") return _ret.v;\n          }\n        default:\n          // selector is a string. match to DOM tag or constructor displayName\n          return function (inst) {\n            return instHasType(inst, selector);\n          };\n      }\n\n    case 'object':\n      if (!Array.isArray(selector) && selector !== null && !(0, _isEmpty2['default'])(selector)) {\n        return function (node) {\n          return instMatchesObjectProps(node, selector);\n        };\n      }\n      throw new TypeError('Enzyme::Selector does not support an array, null, or empty object as a selector');\n\n    default:\n      throw new TypeError('Enzyme::Selector expects a string, object, or Component Constructor');\n  }\n}","/home/travis/build/npmtest/node-npmtest-enzyme/node_modules/enzyme/build/Utils.js":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SELECTOR = exports.isCompoundSelector = exports.ITERATOR_SYMBOL = undefined;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }(); /* eslint no-use-before-define:0 */\n\n\nexports.internalInstance = internalInstance;\nexports.isFunctionalComponent = isFunctionalComponent;\nexports.isCustomComponentElement = isCustomComponentElement;\nexports.propsOfNode = propsOfNode;\nexports.typeOfNode = typeOfNode;\nexports.getNode = getNode;\nexports.nodeHasType = nodeHasType;\nexports.childrenMatch = childrenMatch;\nexports.childrenEqual = childrenEqual;\nexports.nodeMatches = nodeMatches;\nexports.nodeEqual = nodeEqual;\nexports.containsChildrenSubArray = containsChildrenSubArray;\nexports.childrenToSimplifiedArray = childrenToSimplifiedArray;\nexports.isReactElementAlike = isReactElementAlike;\nexports.propFromEvent = propFromEvent;\nexports.withSetStateAllowed = withSetStateAllowed;\nexports.splitSelector = splitSelector;\nexports.isPseudoClassSelector = isPseudoClassSelector;\nexports.selectorError = selectorError;\nexports.selectorType = selectorType;\nexports.AND = AND;\nexports.coercePropValue = coercePropValue;\nexports.nodeHasProperty = nodeHasProperty;\nexports.mapNativeEventNames = mapNativeEventNames;\nexports.displayNameOfNode = displayNameOfNode;\n\nvar _isEqual = require('lodash/isEqual');\n\nvar _isEqual2 = _interopRequireDefault(_isEqual);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _objectIs = require('object-is');\n\nvar _objectIs2 = _interopRequireDefault(_objectIs);\n\nvar _uuid = require('uuid');\n\nvar _uuid2 = _interopRequireDefault(_uuid);\n\nvar _object = require('object.entries');\n\nvar _object2 = _interopRequireDefault(_object);\n\nvar _object3 = require('object.assign');\n\nvar _object4 = _interopRequireDefault(_object3);\n\nvar _functionPrototype = require('function.prototype.name');\n\nvar _functionPrototype2 = _interopRequireDefault(_functionPrototype);\n\nvar _reactCompat = require('./react-compat');\n\nvar _version = require('./version');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar ITERATOR_SYMBOL = exports.ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\n\nfunction internalInstanceKey(node) {\n  return Object.keys(Object(node)).filter(function (key) {\n    return key.match(/^__reactInternalInstance\\$/);\n  })[0];\n}\n\nfunction internalInstance(inst) {\n  return inst._reactInternalInstance || inst[internalInstanceKey(inst)];\n}\n\nfunction isFunctionalComponent(inst) {\n  return !!inst && !!inst.constructor && typeof inst.constructor === 'function' && (0, _functionPrototype2['default'])(inst.constructor) === 'StatelessComponent';\n}\n\nfunction isCustomComponentElement(inst) {\n  return !!inst && _react2['default'].isValidElement(inst) && typeof inst.type === 'function';\n}\n\nfunction propsOfNode(node) {\n  if (_version.REACT013 && node && node._store) {\n    return node._store.props || {};\n  }\n  if (node && node._reactInternalComponent && node._reactInternalComponent._currentElement) {\n    return node._reactInternalComponent._currentElement.props || {};\n  }\n  if (node && node._currentElement) {\n    return node._currentElement.props || {};\n  }\n  if (_version.REACT15 && node) {\n    if (internalInstance(node) && internalInstance(node)._currentElement) {\n      return internalInstance(node)._currentElement.props || {};\n    }\n  }\n\n  return node && node.props || {};\n}\n\nfunction typeOfNode(node) {\n  return node ? node.type : null;\n}\n\nfunction getNode(node) {\n  return (0, _reactCompat.isDOMComponent)(node) ? (0, _reactCompat.findDOMNode)(node) : node;\n}\n\nfunction nodeHasType(node, type) {\n  if (!type || !node) return false;\n  if (!node.type) return false;\n  if (typeof node.type === 'string') return node.type === type;\n  return (typeof node.type === 'function' ? (0, _functionPrototype2['default'])(node.type) === type : node.type.name === type) || node.type.displayName === type;\n}\n\nfunction internalChildrenCompare(a, b, lenComp, isLoose) {\n  var nodeCompare = isLoose ? nodeMatches : nodeEqual;\n\n  if (a === b) return true;\n  if (!Array.isArray(a) && !Array.isArray(b)) {\n    return nodeCompare(a, b, lenComp);\n  }\n  if (!a && !b) return true;\n  if (a.length !== b.length) return false;\n  if (a.length === 0 && b.length === 0) return true;\n  for (var i = 0; i < a.length; i += 1) {\n    if (!nodeCompare(a[i], b[i], lenComp)) return false;\n  }\n  return true;\n}\n\nfunction childrenMatch(a, b, lenComp) {\n  return internalChildrenCompare(a, b, lenComp, true);\n}\n\nfunction childrenEqual(a, b, lenComp) {\n  return internalChildrenCompare(a, b, lenComp, false);\n}\n\nfunction removeNullaryReducer(acc, _ref) {\n  var _ref2 = _slicedToArray(_ref, 2),\n      key = _ref2[0],\n      value = _ref2[1];\n\n  var addition = value == null ? {} : _defineProperty({}, key, value);\n  return (0, _object4['default'])({}, acc, addition);\n}\n\nfunction internalNodeCompare(a, b, lenComp, isLoose) {\n  if (a === b) return true;\n  if (!a || !b) return false;\n  if (a.type !== b.type) return false;\n\n  var left = propsOfNode(a);\n  var right = propsOfNode(b);\n  if (isLoose) {\n    left = (0, _object2['default'])(left).reduce(removeNullaryReducer, {});\n    right = (0, _object2['default'])(right).reduce(removeNullaryReducer, {});\n  }\n\n  var leftKeys = Object.keys(left);\n  for (var i = 0; i < leftKeys.length; i += 1) {\n    var prop = leftKeys[i];\n    // we will check children later\n    if (prop === 'children') {\n      // continue;\n    } else if (!(prop in right)) {\n      return false;\n    } else if (right[prop] === left[prop]) {\n      // continue;\n    } else if (_typeof(right[prop]) === _typeof(left[prop]) && _typeof(left[prop]) === 'object') {\n      if (!(0, _isEqual2['default'])(left[prop], right[prop])) return false;\n    } else {\n      return false;\n    }\n  }\n\n  var leftHasChildren = 'children' in left;\n  var rightHasChildren = 'children' in right;\n  var childCompare = isLoose ? childrenMatch : childrenEqual;\n  if (leftHasChildren || rightHasChildren) {\n    if (!childCompare(childrenToSimplifiedArray(left.children), childrenToSimplifiedArray(right.children), lenComp)) {\n      return false;\n    }\n  }\n\n  if (!isTextualNode(a)) {\n    var rightKeys = Object.keys(right);\n    return lenComp(leftKeys.length - leftHasChildren, rightKeys.length - rightHasChildren);\n  }\n\n  return false;\n}\n\nfunction nodeMatches(a, b) {\n  var lenComp = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _objectIs2['default'];\n\n  return internalNodeCompare(a, b, lenComp, true);\n}\n\nfunction nodeEqual(a, b) {\n  var lenComp = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _objectIs2['default'];\n\n  return internalNodeCompare(a, b, lenComp, false);\n}\n\nfunction containsChildrenSubArray(match, node, subArray) {\n  var children = childrenOfNode(node);\n  var checker = function checker(_, i) {\n    return arraysEqual(match, children.slice(i, i + subArray.length), subArray);\n  };\n  return children.some(checker);\n}\n\nfunction arraysEqual(match, left, right) {\n  return left.length === right.length && left.every(function (el, i) {\n    return match(el, right[i]);\n  });\n}\n\nfunction childrenToSimplifiedArray(nodeChildren) {\n  var childrenArray = (0, _reactCompat.childrenToArray)(nodeChildren);\n  var simplifiedArray = [];\n\n  for (var i = 0; i < childrenArray.length; i += 1) {\n    var child = childrenArray[i];\n    var previousChild = simplifiedArray.pop();\n\n    if (previousChild === undefined) {\n      simplifiedArray.push(child);\n    } else if (isTextualNode(child) && isTextualNode(previousChild)) {\n      simplifiedArray.push(previousChild + child);\n    } else {\n      simplifiedArray.push(previousChild);\n      simplifiedArray.push(child);\n    }\n  }\n\n  return simplifiedArray;\n}\n\nfunction childrenOfNode(node) {\n  var props = propsOfNode(node);\n  var children = props.children;\n\n  return (0, _reactCompat.childrenToArray)(children);\n}\n\nfunction isTextualNode(node) {\n  return typeof node === 'string' || typeof node === 'number';\n}\n\nfunction isReactElementAlike(arg) {\n  return _react2['default'].isValidElement(arg) || isTextualNode(arg) || Array.isArray(arg);\n}\n\n// 'click' => 'onClick'\n// 'mouseEnter' => 'onMouseEnter'\nfunction propFromEvent(event) {\n  var nativeEvent = mapNativeEventNames(event);\n  return 'on' + String(nativeEvent[0].toUpperCase()) + String(nativeEvent.slice(1));\n}\n\nfunction withSetStateAllowed(fn) {\n  // NOTE(lmr):\n  // this is currently here to circumvent a React bug where `setState()` is\n  // not allowed without global being defined.\n  var cleanup = false;\n  if (typeof global.document === 'undefined') {\n    cleanup = true;\n    global.document = {};\n  }\n  fn();\n  if (cleanup) {\n    // This works around a bug in node/jest in that developers aren't able to\n    // delete things from global when running in a node vm.\n    global.document = undefined;\n    delete global.document;\n  }\n}\n\nfunction splitSelector(selector) {\n  // step 1: make a map of all quoted strings with a uuid\n  var quotedSegments = selector.split(/[^\" ]+|(\"[^\"]*\")|.*/g).filter(Boolean).reduce(function (obj, match) {\n    return (0, _object4['default'])({}, obj, _defineProperty({}, match, _uuid2['default'].v4()));\n  }, {});\n\n  var splits = selector\n  // step 2: replace all quoted strings with the uuid, so we don't have to properly parse them\n  .replace(/[^\" ]+|(\"[^\"]*\")|.*/g, function (x) {\n    return quotedSegments[x] || x;\n  })\n  // step 3: split as best we can without a proper parser\n  .split(/(?=\\.|\\[.*])|(?=#|\\[#.*])/)\n  // step 4: restore the quoted strings by swapping back the uuid's for the original segments\n  .map(function (selectorSegment) {\n    var restoredSegment = selectorSegment;\n    (0, _object2['default'])(quotedSegments).forEach(function (_ref4) {\n      var _ref5 = _slicedToArray(_ref4, 2),\n          k = _ref5[0],\n          v = _ref5[1];\n\n      restoredSegment = restoredSegment.replace(v, k);\n    });\n    return restoredSegment;\n  });\n\n  if (splits.length === 1 && splits[0] === selector) {\n    // splitSelector expects selector to be \"splittable\"\n    throw new TypeError('Enzyme::Selector received what appears to be a malformed string selector');\n  }\n\n  return splits;\n}\n\nvar containsQuotes = /'|\"/;\nvar containsColon = /:/;\n\nfunction isPseudoClassSelector(selector) {\n  if (containsColon.test(selector)) {\n    if (!containsQuotes.test(selector)) {\n      return true;\n    }\n    var tokens = selector.split(containsQuotes);\n    return tokens.some(function (token, i) {\n      return containsColon.test(token) && i % 2 === 0;\n    });\n  }\n  return false;\n}\n\nfunction selectorError(selector) {\n  var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n  return new TypeError('Enzyme received a ' + String(type) + ' CSS selector (\\'' + String(selector) + '\\') that it does not currently support');\n}\n\nvar isCompoundSelector = exports.isCompoundSelector = /^[.#]?-?[_a-z]+[_a-z0-9-]*[.[#]/i;\n\nvar isPropSelector = /^\\[.*]$/;\n\nvar SELECTOR = exports.SELECTOR = {\n  CLASS_TYPE: 0,\n  ID_TYPE: 1,\n  PROP_TYPE: 2\n};\n\nfunction selectorType(selector) {\n  if (isPseudoClassSelector(selector)) {\n    throw selectorError(selector, 'pseudo-class');\n  }\n  if (selector[0] === '.') {\n    return SELECTOR.CLASS_TYPE;\n  } else if (selector[0] === '#') {\n    return SELECTOR.ID_TYPE;\n  } else if (isPropSelector.test(selector)) {\n    return SELECTOR.PROP_TYPE;\n  }\n  return undefined;\n}\n\nfunction AND(fns) {\n  var fnsReversed = fns.slice().reverse();\n  return function (x) {\n    return fnsReversed.every(function (fn) {\n      return fn(x);\n    });\n  };\n}\n\nfunction coercePropValue(propName, propValue) {\n  // can be undefined\n  if (propValue === undefined) {\n    return propValue;\n  }\n\n  // can be the empty string\n  if (propValue === '') {\n    return propValue;\n  }\n\n  if (propValue === 'NaN') {\n    return NaN;\n  }\n\n  if (propValue === 'null') {\n    return null;\n  }\n\n  var trimmedValue = propValue.trim();\n\n  // if propValue includes quotes, it should be\n  // treated as a string\n  // eslint override pending https://github.com/eslint/eslint/issues/7472\n  // eslint-disable-next-line no-useless-escape\n  if (/^(['\"]).*\\1$/.test(trimmedValue)) {\n    return trimmedValue.slice(1, -1);\n  }\n\n  var numericPropValue = +trimmedValue;\n\n  // if parseInt is not NaN, then we've wanted a number\n  if (!(0, _objectIs2['default'])(NaN, numericPropValue)) {\n    return numericPropValue;\n  }\n\n  // coerce to boolean\n  if (trimmedValue === 'true') return true;\n  if (trimmedValue === 'false') return false;\n\n  // user provided an unquoted string value\n  throw new TypeError('Enzyme::Unable to parse selector \\'[' + String(propName) + '=' + String(propValue) + ']\\'. ' + ('Perhaps you forgot to escape a string? Try \\'[' + String(propName) + '=\"' + String(trimmedValue) + '\"]\\' instead.'));\n}\n\nfunction nodeHasProperty(node, propKey, stringifiedPropValue) {\n  var nodeProps = propsOfNode(node);\n  var descriptor = Object.getOwnPropertyDescriptor(nodeProps, propKey);\n  if (descriptor && descriptor.get) {\n    return false;\n  }\n  var nodePropValue = nodeProps[propKey];\n\n  var propValue = coercePropValue(propKey, stringifiedPropValue);\n\n  if (nodePropValue === undefined) {\n    return false;\n  }\n\n  if (propValue !== undefined) {\n    return (0, _objectIs2['default'])(nodePropValue, propValue);\n  }\n\n  return Object.prototype.hasOwnProperty.call(nodeProps, propKey);\n}\n\nfunction mapNativeEventNames(event) {\n  var nativeToReactEventMap = {\n    compositionend: 'compositionEnd',\n    compositionstart: 'compositionStart',\n    compositionupdate: 'compositionUpdate',\n    keydown: 'keyDown',\n    keyup: 'keyUp',\n    keypress: 'keyPress',\n    contextmenu: 'contextMenu',\n    dblclick: 'doubleClick',\n    doubleclick: 'doubleClick', // kept for legacy. TODO: remove with next major.\n    dragend: 'dragEnd',\n    dragenter: 'dragEnter',\n    dragexist: 'dragExit',\n    dragleave: 'dragLeave',\n    dragover: 'dragOver',\n    dragstart: 'dragStart',\n    mousedown: 'mouseDown',\n    mousemove: 'mouseMove',\n    mouseout: 'mouseOut',\n    mouseover: 'mouseOver',\n    mouseup: 'mouseUp',\n    touchcancel: 'touchCancel',\n    touchend: 'touchEnd',\n    touchmove: 'touchMove',\n    touchstart: 'touchStart',\n    canplay: 'canPlay',\n    canplaythrough: 'canPlayThrough',\n    durationchange: 'durationChange',\n    loadeddata: 'loadedData',\n    loadedmetadata: 'loadedMetadata',\n    loadstart: 'loadStart',\n    ratechange: 'rateChange',\n    timeupdate: 'timeUpdate',\n    volumechange: 'volumeChange',\n    beforeinput: 'beforeInput'\n  };\n\n  if (!_version.REACT013) {\n    // these could not be simulated in React 0.13:\n    // https://github.com/facebook/react/issues/1297\n    nativeToReactEventMap.mouseenter = 'mouseEnter';\n    nativeToReactEventMap.mouseleave = 'mouseLeave';\n  }\n\n  return nativeToReactEventMap[event] || event;\n}\n\nfunction displayNameOfNode(node) {\n  var type = node.type;\n\n\n  if (!type) return null;\n\n  return type.displayName || (typeof type === 'function' ? (0, _functionPrototype2['default'])(type) : type.name || type);\n}","/home/travis/build/npmtest/node-npmtest-enzyme/node_modules/enzyme/build/react-compat.js":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.batchedUpdates = exports.unmountComponentAtNode = exports.renderWithOptions = exports.childrenToArray = exports.findAllInRenderedTree = exports.findDOMNode = exports.Simulate = exports.isCompositeComponentElement = exports.isCompositeComponentWithType = exports.isCompositeComponent = exports.isDOMComponentElement = exports.isDOMComponent = exports.isElementOfType = exports.isElement = exports.mockComponent = exports.renderIntoDocument = exports.renderToStaticMarkup = exports.createShallowRenderer = undefined;\n\nvar _object = require('object.assign');\n\nvar _object2 = _interopRequireDefault(_object);\n\nvar _version = require('./version');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n/* eslint\n  global-require: 0,\n  import/no-mutable-exports: 0,\n  import/no-unresolved: 0,\n  react/no-deprecated: 0,\n  react/no-render-return-value: 0,\n*/\n\nvar TestUtils = void 0;\nvar createShallowRenderer = void 0;\nvar renderToStaticMarkup = void 0;\nvar renderIntoDocument = void 0;\nvar findDOMNode = void 0;\nvar childrenToArray = void 0;\nvar renderWithOptions = void 0;\nvar unmountComponentAtNode = void 0;\nvar batchedUpdates = void 0;\nvar shallowRendererFactory = void 0;\n\nvar React = require('react');\n\nif (_version.REACT013) {\n  (function () {\n    exports.renderToStaticMarkup = renderToStaticMarkup = React.renderToStaticMarkup;\n    /* eslint-disable react/no-deprecated */\n    exports.findDOMNode = findDOMNode = React.findDOMNode;\n    exports.unmountComponentAtNode = unmountComponentAtNode = React.unmountComponentAtNode;\n    /* eslint-enable react/no-deprecated */\n    TestUtils = require('react/addons').addons.TestUtils;\n    exports.batchedUpdates = batchedUpdates = require('react/addons').addons.batchedUpdates;\n    var ReactContext = require('react/lib/ReactContext');\n\n    // Shallow rendering in 0.13 did not properly support context. This function provides a shim\n    // around `TestUtils.createRenderer` that instead returns a ShallowRenderer that actually\n    // works with context. See https://github.com/facebook/react/issues/3721 for more details.\n    exports.createShallowRenderer = createShallowRenderer = function () {\n      function createRendererCompatible() {\n        var renderer = TestUtils.createRenderer();\n        renderer.render = function (originalRender) {\n          return function () {\n            function contextCompatibleRender(node) {\n              var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n              ReactContext.current = context;\n              originalRender.call(this, React.createElement(node.type, node.props), context);\n              ReactContext.current = {};\n              return renderer.getRenderOutput();\n            }\n\n            return contextCompatibleRender;\n          }();\n        }(renderer.render);\n        return renderer;\n      }\n\n      return createRendererCompatible;\n    }();\n    exports.renderIntoDocument = renderIntoDocument = TestUtils.renderIntoDocument;\n    // this fixes some issues in React 0.13 with setState and jsdom...\n    // see issue: https://github.com/airbnb/enzyme/issues/27\n    require('react/lib/ExecutionEnvironment').canUseDOM = true;\n\n    // in 0.13, a Children.toArray function was not exported. Make our own instead.\n    exports.childrenToArray = childrenToArray = function () {\n      function childrenToArray(children) {\n        var results = [];\n        if (children !== undefined && children !== null && children !== false) {\n          React.Children.forEach(children, function (el) {\n            if (el !== undefined && el !== null && el !== false) {\n              results.push(el);\n            }\n          });\n        }\n        return results;\n      }\n\n      return childrenToArray;\n    }();\n\n    exports.renderWithOptions = renderWithOptions = function () {\n      function renderWithOptions(node, options) {\n        if (options.attachTo) {\n          return React.render(node, options.attachTo);\n        }\n        return TestUtils.renderIntoDocument(node);\n      }\n\n      return renderWithOptions;\n    }();\n  })();\n} else {\n  (function () {\n    var ReactDOM = void 0;\n\n    try {\n      // eslint-disable-next-line import/no-extraneous-dependencies\n      ReactDOM = require('react-dom');\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.error('react-dom is an implicit dependency in order to support react@0.13-14. ' + 'Please add the appropriate version to your devDependencies. ' + 'See https://github.com/airbnb/enzyme#installation');\n      throw e;\n    }\n\n    // eslint-disable-next-line import/no-extraneous-dependencies\n    exports.renderToStaticMarkup = renderToStaticMarkup = require('react-dom/server').renderToStaticMarkup;\n\n    exports.findDOMNode = findDOMNode = ReactDOM.findDOMNode;\n    exports.unmountComponentAtNode = unmountComponentAtNode = ReactDOM.unmountComponentAtNode;\n    exports.batchedUpdates = batchedUpdates = ReactDOM.unstable_batchedUpdates;\n    // We require the testutils, but they don't come with 0.14 out of the box, so we\n    // require them here through this node module. The bummer is that we are not able\n    // to list this as a dependency in package.json and have 0.13 work properly.\n    // As a result, right now this is basically an implicit dependency.\n    try {\n      try {\n        // This is for react v15.5 and up...\n\n        // eslint-disable-next-line import/no-extraneous-dependencies\n        TestUtils = require('react-dom/test-utils');\n        // eslint-disable-next-line import/no-extraneous-dependencies\n        shallowRendererFactory = require('react-test-renderer/shallow').createRenderer;\n      } catch (e) {\n        // This is for react < v15.5.  Note that users who have `react^15.4.x` in their package.json\n        // will arrive here, too.  They need to upgrade.  React will print a nice warning letting\n        // them know they need to upgrade, though, so we're good.  Also note we explicitly do not\n        // use TestUtils from react-dom/test-utils here, mainly so the user still gets a warning for\n        // requiring 'react-addons-test-utils', which lets them know there's action required.\n\n        // eslint-disable-next-line import/no-extraneous-dependencies\n        TestUtils = require('react-addons-test-utils');\n        shallowRendererFactory = TestUtils.createRenderer;\n      }\n    } catch (e) {\n      if (_version.REACT155) {\n        console.error( // eslint-disable-line no-console\n        'react-dom@15.5+ and react-test-renderer are implicit dependencies when using' + 'react@15.5+ with enzyme. Please add the appropriate version to your' + 'devDependencies. See https://github.com/airbnb/enzyme#installation');\n      } else {\n        console.error( // eslint-disable-line no-console\n        'react-addons-test-utils is an implicit dependency in order to support react@0.13-14. ' + 'Please add the appropriate version to your devDependencies. ' + 'See https://github.com/airbnb/enzyme#installation');\n      }\n      throw e;\n    }\n\n    // Shallow rendering changed from 0.13 => 0.14 in such a way that\n    // 0.14 now does not allow shallow rendering of native DOM elements.\n    // This is mainly because the result of such a call should not realistically\n    // be any different than the JSX you passed in (result of `React.createElement`.\n    // In order to maintain the same behavior across versions, this function\n    // is essentially a replacement for `TestUtils.createRenderer` that doesn't use\n    // shallow rendering when it's just a DOM element.\n    exports.createShallowRenderer = createShallowRenderer = function () {\n      function createRendererCompatible() {\n        var renderer = shallowRendererFactory();\n        var originalRender = renderer.render;\n        var originalRenderOutput = renderer.getRenderOutput;\n        var isDOM = false;\n        var cachedNode = void 0;\n        return (0, _object2['default'])(renderer, {\n          render: function () {\n            function render(node, context) {\n              /* eslint consistent-return: 0 */\n              if (typeof node.type === 'string') {\n                isDOM = true;\n                cachedNode = node;\n              } else {\n                isDOM = false;\n                return originalRender.call(this, node, context);\n              }\n            }\n\n            return render;\n          }(),\n          getRenderOutput: function () {\n            function getRenderOutput() {\n              if (isDOM) {\n                return cachedNode;\n              }\n              return originalRenderOutput.call(this);\n            }\n\n            return getRenderOutput;\n          }()\n        });\n      }\n\n      return createRendererCompatible;\n    }();\n    exports.renderIntoDocument = renderIntoDocument = TestUtils.renderIntoDocument;\n    exports.childrenToArray = childrenToArray = React.Children.toArray;\n\n    exports.renderWithOptions = renderWithOptions = function () {\n      function renderWithOptions(node, options) {\n        if (options.attachTo) {\n          return ReactDOM.render(node, options.attachTo);\n        }\n        return TestUtils.renderIntoDocument(node);\n      }\n\n      return renderWithOptions;\n    }();\n  })();\n}\n\nfunction isDOMComponentElement(inst) {\n  return React.isValidElement(inst) && typeof inst.type === 'string';\n}\n\nvar _TestUtils = TestUtils,\n    mockComponent = _TestUtils.mockComponent,\n    isElement = _TestUtils.isElement,\n    isElementOfType = _TestUtils.isElementOfType,\n    isDOMComponent = _TestUtils.isDOMComponent,\n    isCompositeComponent = _TestUtils.isCompositeComponent,\n    isCompositeComponentWithType = _TestUtils.isCompositeComponentWithType,\n    isCompositeComponentElement = _TestUtils.isCompositeComponentElement,\n    Simulate = _TestUtils.Simulate,\n    findAllInRenderedTree = _TestUtils.findAllInRenderedTree;\nexports.createShallowRenderer = createShallowRenderer;\nexports.renderToStaticMarkup = renderToStaticMarkup;\nexports.renderIntoDocument = renderIntoDocument;\nexports.mockComponent = mockComponent;\nexports.isElement = isElement;\nexports.isElementOfType = isElementOfType;\nexports.isDOMComponent = isDOMComponent;\nexports.isDOMComponentElement = isDOMComponentElement;\nexports.isCompositeComponent = isCompositeComponent;\nexports.isCompositeComponentWithType = isCompositeComponentWithType;\nexports.isCompositeComponentElement = isCompositeComponentElement;\nexports.Simulate = Simulate;\nexports.findDOMNode = findDOMNode;\nexports.findAllInRenderedTree = findAllInRenderedTree;\nexports.childrenToArray = childrenToArray;\nexports.renderWithOptions = renderWithOptions;\nexports.unmountComponentAtNode = unmountComponentAtNode;\nexports.batchedUpdates = batchedUpdates;","/home/travis/build/npmtest/node-npmtest-enzyme/node_modules/enzyme/build/version.js":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.REACT155 = exports.REACT15 = exports.REACT014 = exports.REACT013 = exports.VERSION = undefined;\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar VERSION = exports.VERSION = _react2['default'].version;\n\nvar _VERSION$split = VERSION.split('.'),\n    _VERSION$split2 = _slicedToArray(_VERSION$split, 2),\n    major = _VERSION$split2[0],\n    minor = _VERSION$split2[1];\n\nvar REACT013 = exports.REACT013 = VERSION.slice(0, 4) === '0.13';\nvar REACT014 = exports.REACT014 = VERSION.slice(0, 4) === '0.14';\nvar REACT15 = exports.REACT15 = major === '15';\nvar REACT155 = exports.REACT155 = REACT15 && minor >= 5;","/home/travis/build/npmtest/node-npmtest-enzyme/node_modules/enzyme/build/Debug.js":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nexports.typeName = typeName;\nexports.spaces = spaces;\nexports.indent = indent;\nexports.debugNode = debugNode;\nexports.debugNodes = debugNodes;\nexports.debugInst = debugInst;\nexports.debugInsts = debugInsts;\n\nvar _without = require('lodash/without');\n\nvar _without2 = _interopRequireDefault(_without);\n\nvar _escape = require('lodash/escape');\n\nvar _escape2 = _interopRequireDefault(_escape);\n\nvar _compact = require('lodash/compact');\n\nvar _compact2 = _interopRequireDefault(_compact);\n\nvar _object = require('object.values');\n\nvar _object2 = _interopRequireDefault(_object);\n\nvar _functionPrototype = require('function.prototype.name');\n\nvar _functionPrototype2 = _interopRequireDefault(_functionPrototype);\n\nvar _ShallowTraversal = require('./ShallowTraversal');\n\nvar _MountedTraversal = require('./MountedTraversal');\n\nvar _reactCompat = require('./react-compat');\n\nvar _Utils = require('./Utils');\n\nvar _version = require('./version');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction typeName(node) {\n  return typeof node.type === 'function' ? node.type.displayName || (0, _functionPrototype2['default'])(node.type) || 'Component' : node.type;\n}\n\nfunction spaces(n) {\n  return Array(n + 1).join(' ');\n}\n\nfunction indent(depth, string) {\n  return string.split('\\n').map(function (x) {\n    return '' + String(spaces(depth)) + String(x);\n  }).join('\\n');\n}\n\nfunction propString(prop) {\n  switch (typeof prop === 'undefined' ? 'undefined' : _typeof(prop)) {\n    case 'function':\n      return '{[Function]}';\n    case 'string':\n      return '\"' + String(prop) + '\"';\n    case 'number':\n    case 'boolean':\n      return '{' + String(prop) + '}';\n    case 'object':\n      return '{{...}}';\n    default:\n      return '{[' + (typeof prop === 'undefined' ? 'undefined' : _typeof(prop)) + ']}';\n  }\n}\n\nfunction propsString(node) {\n  var props = (0, _Utils.propsOfNode)(node);\n  var keys = (0, _without2['default'])(Object.keys(props), 'children');\n  return keys.map(function (key) {\n    return String(key) + '=' + String(propString(props[key]));\n  }).join(' ');\n}\n\nfunction debugNode(node) {\n  var indentLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n\n  if (typeof node === 'string' || typeof node === 'number') return (0, _escape2['default'])(node);\n  if (!node) return '';\n\n  var children = (0, _compact2['default'])((0, _ShallowTraversal.childrenOfNode)(node).map(function (n) {\n    return debugNode(n, indentLength);\n  }));\n  var type = typeName(node);\n  var props = propsString(node);\n  var beforeProps = props ? ' ' : '';\n  var nodeClose = children.length ? '</' + String(type) + '>' : '/>';\n  var afterProps = children.length ? '>' : ' ';\n  var childrenIndented = children.length ? '\\n' + String(children.map(function (x) {\n    return indent(indentLength, x);\n  }).join('\\n')) + '\\n' : '';\n  return '<' + String(type) + beforeProps + String(props) + afterProps + childrenIndented + nodeClose;\n}\n\nfunction debugNodes(nodes) {\n  return nodes.map(debugNode).join('\\n\\n\\n');\n}\n\nfunction debugInst(inst) {\n  var indentLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n\n  if (typeof inst === 'string' || typeof inst === 'number') return (0, _escape2['default'])(inst);\n  if (!inst) return '';\n\n  if (inst._stringText) {\n    return inst._stringText;\n  }\n\n  if (!inst.getPublicInstance) {\n    var internal = (0, _Utils.internalInstance)(inst);\n    return debugInst(internal, indentLength);\n  }\n  var publicInst = inst.getPublicInstance();\n\n  if (typeof publicInst === 'string' || typeof publicInst === 'number') return (0, _escape2['default'])(publicInst);\n  if (!publicInst && !inst._renderedComponent) return '';\n\n  // do stuff with publicInst\n  var currentElement = inst._currentElement;\n  var type = typeName(currentElement);\n  var props = propsString(currentElement);\n  var children = [];\n  if ((0, _reactCompat.isDOMComponent)(publicInst)) {\n    var renderedChildren = (0, _MountedTraversal.renderedChildrenOfInst)(inst);\n    if (!renderedChildren) {\n      children.push.apply(children, _toConsumableArray((0, _ShallowTraversal.childrenOfNode)(currentElement)));\n    } else {\n      children.push.apply(children, _toConsumableArray((0, _object2['default'])(renderedChildren)));\n    }\n  } else if (!_version.REACT013 && (0, _reactCompat.isElement)(currentElement) && typeof currentElement.type === 'function') {\n    children.push(inst._renderedComponent);\n  } else if (_version.REACT013 && (0, _reactCompat.isCompositeComponent)(publicInst)) {\n    children.push(inst._renderedComponent);\n  }\n\n  var childrenStrs = (0, _compact2['default'])(children.map(function (n) {\n    return debugInst(n, indentLength);\n  }));\n\n  var beforeProps = props ? ' ' : '';\n  var nodeClose = childrenStrs.length ? '</' + String(type) + '>' : '/>';\n  var afterProps = childrenStrs.length ? '>' : ' ';\n  var childrenIndented = childrenStrs.length ? '\\n' + String(childrenStrs.map(function (x) {\n    return indent(indentLength + 2, x);\n  }).join('\\n')) + '\\n' : '';\n  return '<' + String(type) + beforeProps + String(props) + afterProps + childrenIndented + nodeClose;\n}\n\nfunction debugInsts(insts) {\n  return insts.map(debugInst).join('\\n\\n\\n');\n}","/home/travis/build/npmtest/node-npmtest-enzyme/node_modules/enzyme/build/ShallowTraversal.js":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.nodeHasProperty = undefined;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nexports.childrenOfNode = childrenOfNode;\nexports.hasClassName = hasClassName;\nexports.treeForEach = treeForEach;\nexports.treeFilter = treeFilter;\nexports.pathToNode = pathToNode;\nexports.parentsOfNode = parentsOfNode;\nexports.nodeHasId = nodeHasId;\nexports.nodeMatchesObjectProps = nodeMatchesObjectProps;\nexports.buildPredicate = buildPredicate;\nexports.getTextFromNode = getTextFromNode;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _isEmpty = require('lodash/isEmpty');\n\nvar _isEmpty2 = _interopRequireDefault(_isEmpty);\n\nvar _isSubset = require('is-subset');\n\nvar _isSubset2 = _interopRequireDefault(_isSubset);\n\nvar _functionPrototype = require('function.prototype.name');\n\nvar _functionPrototype2 = _interopRequireDefault(_functionPrototype);\n\nvar _Utils = require('./Utils');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction childrenOfNode(node) {\n  if (!node) return [];\n  var maybeArray = (0, _Utils.propsOfNode)(node).children;\n  var result = [];\n  _react2['default'].Children.forEach(maybeArray, function (child) {\n    if (child !== null && child !== false && typeof child !== 'undefined') {\n      result.push(child);\n    }\n  });\n  return result;\n}\n\nfunction hasClassName(node, className) {\n  var classes = (0, _Utils.propsOfNode)(node).className || '';\n  classes = String(classes).replace(/\\s/g, ' ');\n  return (' ' + String(classes) + ' ').indexOf(' ' + String(className) + ' ') > -1;\n}\n\nfunction treeForEach(tree, fn) {\n  if (tree !== null && tree !== false && typeof tree !== 'undefined') {\n    fn(tree);\n  }\n  childrenOfNode(tree).forEach(function (node) {\n    return treeForEach(node, fn);\n  });\n}\n\nfunction treeFilter(tree, fn) {\n  var results = [];\n  treeForEach(tree, function (node) {\n    if (fn(node)) {\n      results.push(node);\n    }\n  });\n  return results;\n}\n\nfunction pathFilter(path, fn) {\n  return path.filter(function (tree) {\n    return treeFilter(tree, fn).length !== 0;\n  });\n}\n\nfunction pathToNode(node, root) {\n  var queue = [root];\n  var path = [];\n\n  var hasNode = function hasNode(testNode) {\n    return node === testNode;\n  };\n\n  while (queue.length) {\n    var current = queue.pop();\n    var children = childrenOfNode(current);\n    if (current === node) return pathFilter(path, hasNode);\n\n    path.push(current);\n\n    if (children.length === 0) {\n      // leaf node. if it isn't the node we are looking for, we pop.\n      path.pop();\n    }\n    queue.push.apply(queue, _toConsumableArray(children));\n  }\n\n  return null;\n}\n\nfunction parentsOfNode(node, root) {\n  return pathToNode(node, root).reverse();\n}\n\nfunction nodeHasId(node, id) {\n  return (0, _Utils.propsOfNode)(node).id === id;\n}\n\nexports.nodeHasProperty = _Utils.nodeHasProperty;\nfunction nodeMatchesObjectProps(node, props) {\n  return (0, _isSubset2['default'])((0, _Utils.propsOfNode)(node), props);\n}\n\nfunction buildPredicate(selector) {\n  switch (typeof selector === 'undefined' ? 'undefined' : _typeof(selector)) {\n    case 'function':\n      // selector is a component constructor\n      return function (node) {\n        return node && node.type === selector;\n      };\n\n    case 'string':\n      if (_Utils.isCompoundSelector.test(selector)) {\n        return (0, _Utils.AND)((0, _Utils.splitSelector)(selector).map(buildPredicate));\n      }\n\n      switch ((0, _Utils.selectorType)(selector)) {\n        case _Utils.SELECTOR.CLASS_TYPE:\n          return function (node) {\n            return hasClassName(node, selector.slice(1));\n          };\n\n        case _Utils.SELECTOR.ID_TYPE:\n          return function (node) {\n            return nodeHasId(node, selector.slice(1));\n          };\n\n        case _Utils.SELECTOR.PROP_TYPE:\n          {\n            var _ret = function () {\n              var propKey = selector.split(/\\[([a-zA-Z-]*?)(=|])/)[1];\n              var propValue = selector.split(/=(.*?)]/)[1];\n\n              return {\n                v: function () {\n                  function v(node) {\n                    return (0, _Utils.nodeHasProperty)(node, propKey, propValue);\n                  }\n\n                  return v;\n                }()\n              };\n            }();\n\n            if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === \"object\") return _ret.v;\n          }\n        default:\n          // selector is a string. match to DOM tag or constructor displayName\n          return function (node) {\n            return (0, _Utils.nodeHasType)(node, selector);\n          };\n      }\n\n    case 'object':\n      if (!Array.isArray(selector) && selector !== null && !(0, _isEmpty2['default'])(selector)) {\n        return function (node) {\n          return nodeMatchesObjectProps(node, selector);\n        };\n      }\n      throw new TypeError('Enzyme::Selector does not support an array, null, or empty object as a selector');\n\n    default:\n      throw new TypeError('Enzyme::Selector expects a string, object, or Component Constructor');\n  }\n}\n\nfunction getTextFromNode(node) {\n  if (node === null || node === undefined) {\n    return '';\n  }\n\n  if (typeof node === 'string' || typeof node === 'number') {\n    return String(node);\n  }\n\n  if (node.type && typeof node.type === 'function') {\n    return '<' + String(node.type.displayName || (0, _functionPrototype2['default'])(node.type)) + ' />';\n  }\n\n  return childrenOfNode(node).map(getTextFromNode).join('').replace(/\\s+/, ' ');\n}","/home/travis/build/npmtest/node-npmtest-enzyme/node_modules/enzyme/build/ShallowWrapper.js":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _flatten = require('lodash/flatten');\n\nvar _flatten2 = _interopRequireDefault(_flatten);\n\nvar _uniq = require('lodash/uniq');\n\nvar _uniq2 = _interopRequireDefault(_uniq);\n\nvar _compact = require('lodash/compact');\n\nvar _compact2 = _interopRequireDefault(_compact);\n\nvar _cheerio = require('cheerio');\n\nvar _cheerio2 = _interopRequireDefault(_cheerio);\n\nvar _object = require('object.assign');\n\nvar _object2 = _interopRequireDefault(_object);\n\nvar _ComplexSelector = require('./ComplexSelector');\n\nvar _ComplexSelector2 = _interopRequireDefault(_ComplexSelector);\n\nvar _Utils = require('./Utils');\n\nvar _Debug = require('./Debug');\n\nvar _ShallowTraversal = require('./ShallowTraversal');\n\nvar _reactCompat = require('./react-compat');\n\nvar _version = require('./version');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Finds all nodes in the current wrapper nodes' render trees that match the provided predicate\n * function.\n *\n * @param {ShallowWrapper} wrapper\n * @param {Function} predicate\n * @param {Function} filter\n * @returns {ShallowWrapper}\n */\nfunction findWhereUnwrapped(wrapper, predicate) {\n  var filter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _ShallowTraversal.treeFilter;\n\n  return wrapper.flatMap(function (n) {\n    return filter(n.getNode(), predicate);\n  });\n}\n\n/**\n * Returns a new wrapper instance with only the nodes of the current wrapper instance that match\n * the provided predicate function.\n *\n * @param {ShallowWrapper} wrapper\n * @param {Function} predicate\n * @returns {ShallowWrapper}\n */\nfunction filterWhereUnwrapped(wrapper, predicate) {\n  return wrapper.wrap((0, _compact2['default'])(wrapper.getNodes().filter(predicate)));\n}\n\n/**\n * Ensure options passed to ShallowWrapper are valid. Throws otherwise.\n * @param {Object} options\n */\nfunction validateOptions(options) {\n  var lifecycleExperimental = options.lifecycleExperimental,\n      disableLifecycleMethods = options.disableLifecycleMethods;\n\n  if (typeof lifecycleExperimental !== 'undefined' && typeof lifecycleExperimental !== 'boolean') {\n    throw new Error('lifecycleExperimental must be either true or false if provided');\n  }\n\n  if (typeof disableLifecycleMethods !== 'undefined' && typeof disableLifecycleMethods !== 'boolean') {\n    throw new Error('disableLifecycleMethods must be either true or false if provided');\n  }\n\n  if (lifecycleExperimental != null && disableLifecycleMethods != null && lifecycleExperimental === disableLifecycleMethods) {\n    throw new Error('lifecycleExperimental and disableLifecycleMethods cannot be set to the same value');\n  }\n}\n\nfunction performBatchedUpdates(wrapper, fn) {\n  var renderer = wrapper.root.renderer;\n  if (_version.REACT155 && renderer.unstable_batchedUpdates) {\n    // React 15.5+ exposes batching on shallow renderer itself\n    return renderer.unstable_batchedUpdates(fn);\n  }\n  // React <15.5: Fallback to ReactDOM\n  return (0, _reactCompat.batchedUpdates)(fn);\n}\n\n/**\n * @class ShallowWrapper\n */\n\nvar ShallowWrapper = function () {\n  function ShallowWrapper(nodes, root) {\n    var _this = this;\n\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    _classCallCheck(this, ShallowWrapper);\n\n    validateOptions(options);\n    if (!root) {\n      this.root = this;\n      this.unrendered = nodes;\n      this.renderer = (0, _reactCompat.createShallowRenderer)();\n      (0, _Utils.withSetStateAllowed)(function () {\n        performBatchedUpdates(_this, function () {\n          _this.renderer.render(nodes, options.context);\n          var instance = _this.instance();\n          if (options.lifecycleExperimental && instance && typeof instance.componentDidMount === 'function') {\n            instance.componentDidMount();\n          }\n        });\n      });\n      this.node = this.renderer.getRenderOutput();\n      this.nodes = [this.node];\n      this.length = 1;\n    } else {\n      this.root = root;\n      this.unrendered = null;\n      this.renderer = null;\n      if (!Array.isArray(nodes)) {\n        this.node = nodes;\n        this.nodes = [nodes];\n      } else {\n        this.node = nodes[0];\n        this.nodes = nodes;\n      }\n      this.length = this.nodes.length;\n    }\n    this.options = options;\n    this.complexSelector = new _ComplexSelector2['default'](_ShallowTraversal.buildPredicate, findWhereUnwrapped, _ShallowTraversal.childrenOfNode);\n  }\n\n  /**\n   * Returns the wrapped ReactElement.\n   *\n   * @return {ReactElement}\n   */\n\n\n  _createClass(ShallowWrapper, [{\n    key: 'getNode',\n    value: function () {\n      function getNode() {\n        if (this.length !== 1) {\n          throw new Error('ShallowWrapper::getNode() can only be called when wrapping one node');\n        }\n        return this.root === this ? this.renderer.getRenderOutput() : this.node;\n      }\n\n      return getNode;\n    }()\n\n    /**\n     * Returns the wrapped ReactElements.\n     *\n     * @return {Array<ReactElement>}\n     */\n\n  }, {\n    key: 'getNodes',\n    value: function () {\n      function getNodes() {\n        return this.root === this ? [this.renderer.getRenderOutput()] : this.nodes;\n      }\n\n      return getNodes;\n    }()\n\n    /**\n     * Gets the instance of the component being rendered as the root node passed into `shallow()`.\n     *\n     * NOTE: can only be called on a wrapper instance that is also the root instance.\n     *\n     * Example:\n     * ```\n     * const wrapper = shallow(<MyComponent />);\n     * const inst = wrapper.instance();\n     * expect(inst).to.be.instanceOf(MyComponent);\n     * ```\n     * @returns {ReactComponent}\n     */\n\n  }, {\n    key: 'instance',\n    value: function () {\n      function instance() {\n        if (this.root !== this) {\n          throw new Error('ShallowWrapper::instance() can only be called on the root');\n        }\n        return this.renderer._instance ? this.renderer._instance._instance : null;\n      }\n\n      return instance;\n    }()\n\n    /**\n     * Forces a re-render. Useful to run before checking the render output if something external\n     * may be updating the state of the component somewhere.\n     *\n     * NOTE: can only be called on a wrapper instance that is also the root instance.\n     *\n     * @returns {ShallowWrapper}\n     */\n\n  }, {\n    key: 'update',\n    value: function () {\n      function update() {\n        var _this2 = this;\n\n        if (this.root !== this) {\n          throw new Error('ShallowWrapper::update() can only be called on the root');\n        }\n        this.single('update', function () {\n          _this2.node = _this2.renderer.getRenderOutput();\n          _this2.nodes = [_this2.node];\n        });\n        return this;\n      }\n\n      return update;\n    }()\n\n    /**\n     * A method is for re-render with new props and context.\n     * This calls componentDidUpdate method if lifecycleExperimental is enabled.\n     *\n     * NOTE: can only be called on a wrapper instance that is also the root instance.\n     *\n     * @param {Object} props\n     * @param {Object} context\n     * @returns {ShallowWrapper}\n     */\n\n  }, {\n    key: 'rerender',\n    value: function () {\n      function rerender(props, context) {\n        var _this3 = this;\n\n        this.single('rerender', function () {\n          (0, _Utils.withSetStateAllowed)(function () {\n            var instance = _this3.instance();\n            var state = instance.state;\n            var prevProps = instance.props;\n            var prevContext = instance.context;\n            var nextProps = props || prevProps;\n            var nextContext = context || prevContext;\n            performBatchedUpdates(_this3, function () {\n              var shouldRender = true;\n              // dirty hack:\n              // make sure that componentWillReceiveProps is called before shouldComponentUpdate\n              var originalComponentWillReceiveProps = void 0;\n              if (_this3.options.lifecycleExperimental && instance && typeof instance.componentWillReceiveProps === 'function') {\n                instance.componentWillReceiveProps(nextProps, nextContext);\n                originalComponentWillReceiveProps = instance.componentWillReceiveProps;\n                instance.componentWillReceiveProps = function () {};\n              }\n              // dirty hack: avoid calling shouldComponentUpdate twice\n              var originalShouldComponentUpdate = void 0;\n              if (_this3.options.lifecycleExperimental && instance && typeof instance.shouldComponentUpdate === 'function') {\n                shouldRender = instance.shouldComponentUpdate(nextProps, state, nextContext);\n                originalShouldComponentUpdate = instance.shouldComponentUpdate;\n              }\n              if (shouldRender) {\n                if (props) _this3.unrendered = _react2['default'].cloneElement(_this3.unrendered, props);\n                if (originalShouldComponentUpdate) {\n                  instance.shouldComponentUpdate = function () {\n                    return true;\n                  };\n                }\n\n                _this3.renderer.render(_this3.unrendered, nextContext);\n\n                if (originalShouldComponentUpdate) {\n                  instance.shouldComponentUpdate = originalShouldComponentUpdate;\n                }\n                if (_this3.options.lifecycleExperimental && instance && typeof instance.componentDidUpdate === 'function') {\n                  instance.componentDidUpdate(prevProps, state, prevContext);\n                }\n                _this3.update();\n                // If it doesn't need to rerender, update only its props.\n              } else if (props) {\n                instance.props = props;\n              }\n              if (originalComponentWillReceiveProps) {\n                instance.componentWillReceiveProps = originalComponentWillReceiveProps;\n              }\n            });\n          });\n        });\n        return this;\n      }\n\n      return rerender;\n    }()\n\n    /**\n     * A method that sets the props of the root component, and re-renders. Useful for when you are\n     * wanting to test how the component behaves over time with changing props. Calling this, for\n     * instance, will call the `componentWillReceiveProps` lifecycle method.\n     *\n     * Similar to `setState`, this method accepts a props object and will merge it in with the already\n     * existing props.\n     *\n     * NOTE: can only be called on a wrapper instance that is also the root instance.\n     *\n     * @param {Object} props object\n     * @returns {ShallowWrapper}\n     */\n\n  }, {\n    key: 'setProps',\n    value: function () {\n      function setProps(props) {\n        if (this.root !== this) {\n          throw new Error('ShallowWrapper::setProps() can only be called on the root');\n        }\n        return this.rerender(props);\n      }\n\n      return setProps;\n    }()\n\n    /**\n     * A method to invoke `setState` on the root component instance similar to how you might in the\n     * definition of the component, and re-renders.  This method is useful for testing your component\n     * in hard to achieve states, however should be used sparingly. If possible, you should utilize\n     * your component's external API in order to get it into whatever state you want to test, in order\n     * to be as accurate of a test as possible. This is not always practical, however.\n     *\n     * NOTE: can only be called on a wrapper instance that is also the root instance.\n     *\n     * @param {Object} state to merge\n     * @param {Function} cb - callback function\n     * @returns {ShallowWrapper}\n     */\n\n  }, {\n    key: 'setState',\n    value: function () {\n      function setState(state) {\n        var _this4 = this;\n\n        var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n\n        if (this.root !== this) {\n          throw new Error('ShallowWrapper::setState() can only be called on the root');\n        }\n        if ((0, _Utils.isFunctionalComponent)(this.instance())) {\n          throw new Error('ShallowWrapper::setState() can only be called on class components');\n        }\n        this.single('setState', function () {\n          (0, _Utils.withSetStateAllowed)(function () {\n            _this4.instance().setState(state, callback);\n            _this4.update();\n          });\n        });\n        return this;\n      }\n\n      return setState;\n    }()\n\n    /**\n     * A method that sets the context of the root component, and re-renders. Useful for when you are\n     * wanting to test how the component behaves over time with changing contexts.\n     *\n     * NOTE: can only be called on a wrapper instance that is also the root instance.\n     *\n     * @param {Object} context object\n     * @returns {ShallowWrapper}\n     */\n\n  }, {\n    key: 'setContext',\n    value: function () {\n      function setContext(context) {\n        if (this.root !== this) {\n          throw new Error('ShallowWrapper::setContext() can only be called on the root');\n        }\n        if (!this.options.context) {\n          throw new Error('ShallowWrapper::setContext() can only be called on a wrapper that was originally passed ' + 'a context option');\n        }\n        return this.rerender(null, context);\n      }\n\n      return setContext;\n    }()\n\n    /**\n     * Whether or not a given react element exists in the shallow render tree.\n     *\n     * Example:\n     * ```\n     * const wrapper = shallow(<MyComponent />);\n     * expect(wrapper.contains(<div className=\"foo bar\" />)).to.equal(true);\n     * ```\n     *\n     * @param {ReactElement|Array<ReactElement>} nodeOrNodes\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: 'contains',\n    value: function () {\n      function contains(nodeOrNodes) {\n        if (!(0, _Utils.isReactElementAlike)(nodeOrNodes)) {\n          throw new Error('ShallowWrapper::contains() can only be called with ReactElement (or array of them), ' + 'string or number as argument.');\n        }\n\n        var predicate = Array.isArray(nodeOrNodes) ? function (other) {\n          return (0, _Utils.containsChildrenSubArray)(_Utils.nodeEqual, other, nodeOrNodes);\n        } : function (other) {\n          return (0, _Utils.nodeEqual)(nodeOrNodes, other);\n        };\n\n        return findWhereUnwrapped(this, predicate).length > 0;\n      }\n\n      return contains;\n    }()\n\n    /**\n     * Whether or not a given react element exists in the shallow render tree.\n     * Match is based on the expected element and not on wrappers element.\n     * It will determine if one of the wrappers element \"looks like\" the expected\n     * element by checking if all props of the expected element are present\n     * on the wrappers element and equals to each other.\n     *\n     * Example:\n     * ```\n     * // MyComponent outputs <div><div class=\"foo\">Hello</div></div>\n     * const wrapper = shallow(<MyComponent />);\n     * expect(wrapper.containsMatchingElement(<div>Hello</div>)).to.equal(true);\n     * ```\n     *\n     * @param {ReactElement} node\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: 'containsMatchingElement',\n    value: function () {\n      function containsMatchingElement(node) {\n        var predicate = function () {\n          function predicate(other) {\n            return (0, _Utils.nodeMatches)(node, other, function (a, b) {\n              return a <= b;\n            });\n          }\n\n          return predicate;\n        }();\n        return findWhereUnwrapped(this, predicate).length > 0;\n      }\n\n      return containsMatchingElement;\n    }()\n\n    /**\n     * Whether or not all the given react elements exists in the shallow render tree.\n     * Match is based on the expected element and not on wrappers element.\n     * It will determine if one of the wrappers element \"looks like\" the expected\n     * element by checking if all props of the expected element are present\n     * on the wrappers element and equals to each other.\n     *\n     * Example:\n     * ```\n     * const wrapper = shallow(<MyComponent />);\n     * expect(wrapper.containsAllMatchingElements([\n     *   <div>Hello</div>,\n     *   <div>Goodbye</div>,\n     * ])).to.equal(true);\n     * ```\n     *\n     * @param {Array<ReactElement>} nodes\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: 'containsAllMatchingElements',\n    value: function () {\n      function containsAllMatchingElements(nodes) {\n        var invertedEquals = function () {\n          function invertedEquals(n1, n2) {\n            return (0, _Utils.nodeMatches)(n2, n1, function (a, b) {\n              return a <= b;\n            });\n          }\n\n          return invertedEquals;\n        }();\n        var predicate = function () {\n          function predicate(other) {\n            return (0, _Utils.containsChildrenSubArray)(invertedEquals, other, nodes);\n          }\n\n          return predicate;\n        }();\n        return findWhereUnwrapped(this, predicate).length > 0;\n      }\n\n      return containsAllMatchingElements;\n    }()\n\n    /**\n     * Whether or not one of the given react elements exists in the shallow render tree.\n     * Match is based on the expected element and not on wrappers element.\n     * It will determine if one of the wrappers element \"looks like\" the expected\n     * element by checking if all props of the expected element are present\n     * on the wrappers element and equals to each other.\n     *\n     * Example:\n     * ```\n     * const wrapper = shallow(<MyComponent />);\n     * expect(wrapper.containsAnyMatchingElements([\n     *   <div>Hello</div>,\n     *   <div>Goodbye</div>,\n     * ])).to.equal(true);\n     * ```\n     *\n     * @param {Array<ReactElement>} nodes\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: 'containsAnyMatchingElements',\n    value: function () {\n      function containsAnyMatchingElements(nodes) {\n        var _this5 = this;\n\n        return Array.isArray(nodes) && nodes.some(function (node) {\n          return _this5.containsMatchingElement(node);\n        });\n      }\n\n      return containsAnyMatchingElements;\n    }()\n\n    /**\n     * Whether or not a given react element exists in the shallow render tree.\n     *\n     * Example:\n     * ```\n     * const wrapper = shallow(<MyComponent />);\n     * expect(wrapper.contains(<div className=\"foo bar\" />)).to.equal(true);\n     * ```\n     *\n     * @param {ReactElement} node\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: 'equals',\n    value: function () {\n      function equals(node) {\n        var _this6 = this;\n\n        return this.single('equals', function () {\n          return (0, _Utils.nodeEqual)(_this6.getNode(), node);\n        });\n      }\n\n      return equals;\n    }()\n\n    /**\n     * Whether or not a given react element matches the shallow render tree.\n     * Match is based on the expected element and not on wrapper root node.\n     * It will determine if the wrapper root node \"looks like\" the expected\n     * element by checking if all props of the expected element are present\n     * on the wrapper root node and equals to each other.\n     *\n     * Example:\n     * ```\n     * // MyComponent outputs <div class=\"foo\">Hello</div>\n     * const wrapper = shallow(<MyComponent />);\n     * expect(wrapper.matchesElement(<div>Hello</div>)).to.equal(true);\n     * ```\n     *\n     * @param {ReactElement} node\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: 'matchesElement',\n    value: function () {\n      function matchesElement(node) {\n        var _this7 = this;\n\n        return this.single('matchesElement', function () {\n          return (0, _Utils.nodeMatches)(node, _this7.getNode(), function (a, b) {\n            return a <= b;\n          });\n        });\n      }\n\n      return matchesElement;\n    }()\n\n    /**\n     * Finds every node in the render tree of the current wrapper that matches the provided selector.\n     *\n     * @param {String|Function} selector\n     * @returns {ShallowWrapper}\n     */\n\n  }, {\n    key: 'find',\n    value: function () {\n      function find(selector) {\n        return this.complexSelector.find(selector, this);\n      }\n\n      return find;\n    }()\n\n    /**\n     * Returns whether or not current node matches a provided selector.\n     *\n     * NOTE: can only be called on a wrapper of a single node.\n     *\n     * @param {String|Function} selector\n     * @returns {boolean}\n     */\n\n  }, {\n    key: 'is',\n    value: function () {\n      function is(selector) {\n        var predicate = (0, _ShallowTraversal.buildPredicate)(selector);\n        return this.single('is', function (n) {\n          return predicate(n);\n        });\n      }\n\n      return is;\n    }()\n\n    /**\n     * Returns true if the component rendered nothing, i.e., null or false.\n     *\n     * @returns {boolean}\n     */\n\n  }, {\n    key: 'isEmptyRender',\n    value: function () {\n      function isEmptyRender() {\n        return this.type() === null;\n      }\n\n      return isEmptyRender;\n    }()\n\n    /**\n     * Returns a new wrapper instance with only the nodes of the current wrapper instance that match\n     * the provided predicate function. The predicate should receive a wrapped node as its first\n     * argument.\n     *\n     * @param {Function} predicate\n     * @returns {ShallowWrapper}\n     */\n\n  }, {\n    key: 'filterWhere',\n    value: function () {\n      function filterWhere(predicate) {\n        var _this8 = this;\n\n        return filterWhereUnwrapped(this, function (n) {\n          return predicate(_this8.wrap(n));\n        });\n      }\n\n      return filterWhere;\n    }()\n\n    /**\n     * Returns a new wrapper instance with only the nodes of the current wrapper instance that match\n     * the provided selector.\n     *\n     * @param {String|Function} selector\n     * @returns {ShallowWrapper}\n     */\n\n  }, {\n    key: 'filter',\n    value: function () {\n      function filter(selector) {\n        var predicate = (0, _ShallowTraversal.buildPredicate)(selector);\n        return filterWhereUnwrapped(this, predicate);\n      }\n\n      return filter;\n    }()\n\n    /**\n     * Returns a new wrapper instance with only the nodes of the current wrapper that did not match\n     * the provided selector. Essentially the inverse of `filter`.\n     *\n     * @param {String|Function} selector\n     * @returns {ShallowWrapper}\n     */\n\n  }, {\n    key: 'not',\n    value: function () {\n      function not(selector) {\n        var predicate = (0, _ShallowTraversal.buildPredicate)(selector);\n        return filterWhereUnwrapped(this, function (n) {\n          return !predicate(n);\n        });\n      }\n\n      return not;\n    }()\n\n    /**\n     * Returns a string of the rendered text of the current render tree.  This function should be\n     * looked at with skepticism if being used to test what the actual HTML output of the component\n     * will be. If that is what you would like to test, use enzyme's `render` function instead.\n     *\n     * NOTE: can only be called on a wrapper of a single node.\n     *\n     * @returns {String}\n     */\n\n  }, {\n    key: 'text',\n    value: function () {\n      function text() {\n        return this.single('text', _ShallowTraversal.getTextFromNode);\n      }\n\n      return text;\n    }()\n\n    /**\n     * Returns the HTML of the node.\n     *\n     * NOTE: can only be called on a wrapper of a single node.\n     *\n     * @returns {String}\n     */\n\n  }, {\n    key: 'html',\n    value: function () {\n      function html() {\n        var _this9 = this;\n\n        return this.single('html', function (n) {\n          return _this9.type() === null ? null : (0, _reactCompat.renderToStaticMarkup)(n);\n        });\n      }\n\n      return html;\n    }()\n\n    /**\n     * Returns the current node rendered to HTML and wrapped in a CheerioWrapper.\n     *\n     * NOTE: can only be called on a wrapper of a single node.\n     *\n     * @returns {CheerioWrapper}\n     */\n\n  }, {\n    key: 'render',\n    value: function () {\n      function render() {\n        return this.type() === null ? (0, _cheerio2['default'])() : _cheerio2['default'].load(this.html()).root();\n      }\n\n      return render;\n    }()\n\n    /**\n     * A method that unmounts the component. This can be used to simulate a component going through\n     * and unmount/mount lifecycle.\n     * @returns {ShallowWrapper}\n     */\n\n  }, {\n    key: 'unmount',\n    value: function () {\n      function unmount() {\n        this.renderer.unmount();\n        return this;\n      }\n\n      return unmount;\n    }()\n\n    /**\n     * Used to simulate events. Pass an eventname and (optionally) event arguments. This method of\n     * testing events should be met with some skepticism.\n     *\n     * @param {String} event\n     * @param {Array} args\n     * @returns {ShallowWrapper}\n     */\n\n  }, {\n    key: 'simulate',\n    value: function () {\n      function simulate(event) {\n        var _this10 = this;\n\n        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n\n        var handler = this.prop((0, _Utils.propFromEvent)(event));\n        if (handler) {\n          (0, _Utils.withSetStateAllowed)(function () {\n            // TODO(lmr): create/use synthetic events\n            // TODO(lmr): emulate React's event propagation\n            performBatchedUpdates(_this10, function () {\n              handler.apply(undefined, args);\n            });\n            _this10.root.update();\n          });\n        }\n        return this;\n      }\n\n      return simulate;\n    }()\n\n    /**\n     * Returns the props hash for the current node of the wrapper.\n     *\n     * NOTE: can only be called on a wrapper of a single node.\n     *\n     * @returns {Object}\n     */\n\n  }, {\n    key: 'props',\n    value: function () {\n      function props() {\n        return this.single('props', _Utils.propsOfNode);\n      }\n\n      return props;\n    }()\n\n    /**\n     * Returns the state hash for the root node of the wrapper. Optionally pass in a prop name and it\n     * will return just that value.\n     *\n     * NOTE: can only be called on a wrapper of a single node.\n     *\n     * @param {String} name (optional)\n     * @returns {*}\n     */\n\n  }, {\n    key: 'state',\n    value: function () {\n      function state(name) {\n        var _this11 = this;\n\n        if (this.root !== this) {\n          throw new Error('ShallowWrapper::state() can only be called on the root');\n        }\n        if ((0, _Utils.isFunctionalComponent)(this.instance())) {\n          throw new Error('ShallowWrapper::state() can only be called on class components');\n        }\n        var _state = this.single('state', function () {\n          return _this11.instance().state;\n        });\n        if (name !== undefined) {\n          return _state[name];\n        }\n        return _state;\n      }\n\n      return state;\n    }()\n\n    /**\n     * Returns the context hash for the root node of the wrapper.\n     * Optionally pass in a prop name and it will return just that value.\n     *\n     * NOTE: can only be called on a wrapper of a single node.\n     *\n     * @param {String} name (optional)\n     * @returns {*}\n     */\n\n  }, {\n    key: 'context',\n    value: function () {\n      function context(name) {\n        var _this12 = this;\n\n        if (this.root !== this) {\n          throw new Error('ShallowWrapper::context() can only be called on the root');\n        }\n        if (!this.options.context) {\n          throw new Error('ShallowWrapper::context() can only be called on a wrapper that was originally passed ' + 'a context option');\n        }\n        var _context = this.single('context', function () {\n          return _this12.instance().context;\n        });\n        if (name) {\n          return _context[name];\n        }\n        return _context;\n      }\n\n      return context;\n    }()\n\n    /**\n     * Returns a new wrapper with all of the children of the current wrapper.\n     *\n     * @param {String|Function} [selector]\n     * @returns {ShallowWrapper}\n     */\n\n  }, {\n    key: 'children',\n    value: function () {\n      function children(selector) {\n        var allChildren = this.flatMap(function (n) {\n          return (0, _ShallowTraversal.childrenOfNode)(n.getNode());\n        });\n        return selector ? allChildren.filter(selector) : allChildren;\n      }\n\n      return children;\n    }()\n\n    /**\n     * Returns a new wrapper with a specific child\n     *\n     * @param {Number} [index]\n     * @returns {ShallowWrapper}\n     */\n\n  }, {\n    key: 'childAt',\n    value: function () {\n      function childAt(index) {\n        var _this13 = this;\n\n        return this.single('childAt', function () {\n          return _this13.children().at(index);\n        });\n      }\n\n      return childAt;\n    }()\n\n    /**\n     * Returns a wrapper around all of the parents/ancestors of the wrapper. Does not include the node\n     * in the current wrapper.\n     *\n     * NOTE: can only be called on a wrapper of a single node.\n     *\n     * @param {String|Function} [selector]\n     * @returns {ShallowWrapper}\n     */\n\n  }, {\n    key: 'parents',\n    value: function () {\n      function parents(selector) {\n        var _this14 = this;\n\n        var allParents = this.wrap(this.single('parents', function (n) {\n          return (0, _ShallowTraversal.parentsOfNode)(n, _this14.root.getNode());\n        }));\n        return selector ? allParents.filter(selector) : allParents;\n      }\n\n      return parents;\n    }()\n\n    /**\n     * Returns a wrapper around the immediate parent of the current node.\n     *\n     * @returns {ShallowWrapper}\n     */\n\n  }, {\n    key: 'parent',\n    value: function () {\n      function parent() {\n        return this.flatMap(function (n) {\n          return [n.parents().get(0)];\n        });\n      }\n\n      return parent;\n    }()\n\n    /**\n     *\n     * @param {String|Function} selector\n     * @returns {ShallowWrapper}\n     */\n\n  }, {\n    key: 'closest',\n    value: function () {\n      function closest(selector) {\n        return this.is(selector) ? this : this.parents().filter(selector).first();\n      }\n\n      return closest;\n    }()\n\n    /**\n     * Shallow renders the current node and returns a shallow wrapper around it.\n     *\n     * NOTE: can only be called on wrapper of a single node.\n     *\n     * @param options object\n     * @returns {ShallowWrapper}\n     */\n\n  }, {\n    key: 'shallow',\n    value: function () {\n      function shallow(options) {\n        return this.single('shallow', function (n) {\n          return new ShallowWrapper(n, null, options);\n        });\n      }\n\n      return shallow;\n    }()\n\n    /**\n     * Returns the value of prop with the given name of the current node.\n     *\n     * @param propName\n     * @returns {*}\n     */\n\n  }, {\n    key: 'prop',\n    value: function () {\n      function prop(propName) {\n        return this.props()[propName];\n      }\n\n      return prop;\n    }()\n\n    /**\n     * Returns the key assigned to the current node.\n     *\n     * @returns {String}\n     */\n\n  }, {\n    key: 'key',\n    value: function () {\n      function key() {\n        return this.single('key', function (n) {\n          return n.key;\n        });\n      }\n\n      return key;\n    }()\n\n    /**\n     * Returns the type of the current node of this wrapper. If it's a composite component, this will\n     * be the component constructor. If it's a native DOM node, it will be a string.\n     *\n     * @returns {String|Function}\n     */\n\n  }, {\n    key: 'type',\n    value: function () {\n      function type() {\n        return this.single('type', _Utils.typeOfNode);\n      }\n\n      return type;\n    }()\n\n    /**\n     * Returns the name of the current node of this wrapper.\n     *\n     * In order of precedence => type.displayName -> type.name -> type.\n     *\n     * @returns {String}\n     */\n\n  }, {\n    key: 'name',\n    value: function () {\n      function name() {\n        return this.single('name', _Utils.displayNameOfNode);\n      }\n\n      return name;\n    }()\n\n    /**\n     * Returns whether or not the current node has the given class name or not.\n     *\n     * NOTE: can only be called on a wrapper of a single node.\n     *\n     * @param className\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: 'hasClass',\n    value: function () {\n      function hasClass(className) {\n        if (className && className.indexOf('.') !== -1) {\n          // eslint-disable-next-line no-console\n          console.warn('It looks like you\\'re calling `ShallowWrapper::hasClass()` with a CSS selector. ' + 'hasClass() expects a class name, not a CSS selector.');\n        }\n        return this.single('hasClass', function (n) {\n          return (0, _ShallowTraversal.hasClassName)(n, className);\n        });\n      }\n\n      return hasClass;\n    }()\n\n    /**\n     * Iterates through each node of the current wrapper and executes the provided function with a\n     * wrapper around the corresponding node passed in as the first argument.\n     *\n     * @param {Function} fn\n     * @returns {ShallowWrapper}\n     */\n\n  }, {\n    key: 'forEach',\n    value: function () {\n      function forEach(fn) {\n        var _this15 = this;\n\n        this.getNodes().forEach(function (n, i) {\n          return fn.call(_this15, _this15.wrap(n), i);\n        });\n        return this;\n      }\n\n      return forEach;\n    }()\n\n    /**\n     * Maps the current array of nodes to another array. Each node is passed in as a `ShallowWrapper`\n     * to the map function.\n     *\n     * @param {Function} fn\n     * @returns {Array}\n     */\n\n  }, {\n    key: 'map',\n    value: function () {\n      function map(fn) {\n        var _this16 = this;\n\n        return this.getNodes().map(function (n, i) {\n          return fn.call(_this16, _this16.wrap(n), i);\n        });\n      }\n\n      return map;\n    }()\n\n    /**\n     * Reduces the current array of nodes to a value. Each node is passed in as a `ShallowWrapper`\n     * to the reducer function.\n     *\n     * @param {Function} fn - the reducer function\n     * @param {*} initialValue - the initial value\n     * @returns {*}\n     */\n\n  }, {\n    key: 'reduce',\n    value: function () {\n      function reduce(fn, initialValue) {\n        var _this17 = this;\n\n        return this.getNodes().reduce(function (accum, n, i) {\n          return fn.call(_this17, accum, _this17.wrap(n), i);\n        }, initialValue);\n      }\n\n      return reduce;\n    }()\n\n    /**\n     * Reduces the current array of nodes to another array, from right to left. Each node is passed\n     * in as a `ShallowWrapper` to the reducer function.\n     *\n     * @param {Function} fn - the reducer function\n     * @param {*} initialValue - the initial value\n     * @returns {*}\n     */\n\n  }, {\n    key: 'reduceRight',\n    value: function () {\n      function reduceRight(fn, initialValue) {\n        var _this18 = this;\n\n        return this.getNodes().reduceRight(function (accum, n, i) {\n          return fn.call(_this18, accum, _this18.wrap(n), i);\n        }, initialValue);\n      }\n\n      return reduceRight;\n    }()\n\n    /**\n     * Returns a new wrapper with a subset of the nodes of the original wrapper, according to the\n     * rules of `Array#slice`.\n     *\n     * @param {Number} begin\n     * @param {Number} end\n     * @returns {ShallowWrapper}\n     */\n\n  }, {\n    key: 'slice',\n    value: function () {\n      function slice(begin, end) {\n        return this.wrap(this.getNodes().slice(begin, end));\n      }\n\n      return slice;\n    }()\n\n    /**\n     * Returns whether or not any of the nodes in the wrapper match the provided selector.\n     *\n     * @param {Function|String} selector\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: 'some',\n    value: function () {\n      function some(selector) {\n        if (this.root === this) {\n          throw new Error('ShallowWrapper::some() can not be called on the root');\n        }\n        var predicate = (0, _ShallowTraversal.buildPredicate)(selector);\n        return this.getNodes().some(predicate);\n      }\n\n      return some;\n    }()\n\n    /**\n     * Returns whether or not any of the nodes in the wrapper pass the provided predicate function.\n     *\n     * @param {Function} predicate\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: 'someWhere',\n    value: function () {\n      function someWhere(predicate) {\n        var _this19 = this;\n\n        return this.getNodes().some(function (n, i) {\n          return predicate.call(_this19, _this19.wrap(n), i);\n        });\n      }\n\n      return someWhere;\n    }()\n\n    /**\n     * Returns whether or not all of the nodes in the wrapper match the provided selector.\n     *\n     * @param {Function|String} selector\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: 'every',\n    value: function () {\n      function every(selector) {\n        var predicate = (0, _ShallowTraversal.buildPredicate)(selector);\n        return this.getNodes().every(predicate);\n      }\n\n      return every;\n    }()\n\n    /**\n     * Returns whether or not any of the nodes in the wrapper pass the provided predicate function.\n     *\n     * @param {Function} predicate\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: 'everyWhere',\n    value: function () {\n      function everyWhere(predicate) {\n        var _this20 = this;\n\n        return this.getNodes().every(function (n, i) {\n          return predicate.call(_this20, _this20.wrap(n), i);\n        });\n      }\n\n      return everyWhere;\n    }()\n\n    /**\n     * Utility method used to create new wrappers with a mapping function that returns an array of\n     * nodes in response to a single node wrapper. The returned wrapper is a single wrapper around\n     * all of the mapped nodes flattened (and de-duplicated).\n     *\n     * @param {Function} fn\n     * @returns {ShallowWrapper}\n     */\n\n  }, {\n    key: 'flatMap',\n    value: function () {\n      function flatMap(fn) {\n        var _this21 = this;\n\n        var nodes = this.getNodes().map(function (n, i) {\n          return fn.call(_this21, _this21.wrap(n), i);\n        });\n        var flattened = (0, _flatten2['default'])(nodes, true);\n        var uniques = (0, _uniq2['default'])(flattened);\n        var compacted = (0, _compact2['default'])(uniques);\n        return this.wrap(compacted);\n      }\n\n      return flatMap;\n    }()\n\n    /**\n     * Finds all nodes in the current wrapper nodes' render trees that match the provided predicate\n     * function. The predicate function will receive the nodes inside a ShallowWrapper as its\n     * first argument.\n     *\n     * @param {Function} predicate\n     * @returns {ShallowWrapper}\n     */\n\n  }, {\n    key: 'findWhere',\n    value: function () {\n      function findWhere(predicate) {\n        var _this22 = this;\n\n        return findWhereUnwrapped(this, function (n) {\n          return predicate(_this22.wrap(n));\n        });\n      }\n\n      return findWhere;\n    }()\n\n    /**\n     * Returns the node at a given index of the current wrapper.\n     *\n     * @param index\n     * @returns {ReactElement}\n     */\n\n  }, {\n    key: 'get',\n    value: function () {\n      function get(index) {\n        return this.getNodes()[index];\n      }\n\n      return get;\n    }()\n\n    /**\n     * Returns a wrapper around the node at a given index of the current wrapper.\n     *\n     * @param index\n     * @returns {ShallowWrapper}\n     */\n\n  }, {\n    key: 'at',\n    value: function () {\n      function at(index) {\n        return this.wrap(this.getNodes()[index]);\n      }\n\n      return at;\n    }()\n\n    /**\n     * Returns a wrapper around the first node of the current wrapper.\n     *\n     * @returns {ShallowWrapper}\n     */\n\n  }, {\n    key: 'first',\n    value: function () {\n      function first() {\n        return this.at(0);\n      }\n\n      return first;\n    }()\n\n    /**\n     * Returns a wrapper around the last node of the current wrapper.\n     *\n     * @returns {ShallowWrapper}\n     */\n\n  }, {\n    key: 'last',\n    value: function () {\n      function last() {\n        return this.at(this.length - 1);\n      }\n\n      return last;\n    }()\n\n    /**\n     * Delegates to exists()\n     *\n     * @returns {boolean}\n     */\n\n  }, {\n    key: 'isEmpty',\n    value: function () {\n      function isEmpty() {\n        // eslint-disable-next-line no-console\n        console.warn('Enzyme::Deprecated method isEmpty() called, use exists() instead.');\n        return !this.exists();\n      }\n\n      return isEmpty;\n    }()\n\n    /**\n     * Returns true if the current wrapper has nodes. False otherwise.\n     *\n     * @returns {boolean}\n     */\n\n  }, {\n    key: 'exists',\n    value: function () {\n      function exists() {\n        return this.length > 0;\n      }\n\n      return exists;\n    }()\n\n    /**\n     * Utility method that throws an error if the current instance has a length other than one.\n     * This is primarily used to enforce that certain methods are only run on a wrapper when it is\n     * wrapping a single node.\n     *\n     * @param fn\n     * @returns {*}\n     */\n\n  }, {\n    key: 'single',\n    value: function () {\n      function single(name, fn) {\n        var fnName = typeof name === 'string' ? name : 'unknown';\n        var callback = typeof fn === 'function' ? fn : name;\n        if (this.length !== 1) {\n          throw new Error('Method \\u201C' + fnName + '\\u201D is only meant to be run on a single node. ' + String(this.length) + ' found instead.');\n        }\n        return callback.call(this, this.getNode());\n      }\n\n      return single;\n    }()\n\n    /**\n     * Helpful utility method to create a new wrapper with the same root as the current wrapper, with\n     * any nodes passed in as the first parameter automatically wrapped.\n     *\n     * @param node\n     * @returns {ShallowWrapper}\n     */\n\n  }, {\n    key: 'wrap',\n    value: function () {\n      function wrap(node) {\n        if (node instanceof ShallowWrapper) {\n          return node;\n        }\n        return new ShallowWrapper(node, this.root);\n      }\n\n      return wrap;\n    }()\n\n    /**\n     * Returns an HTML-like string of the shallow render for debugging purposes.\n     *\n     * @returns {String}\n     */\n\n  }, {\n    key: 'debug',\n    value: function () {\n      function debug() {\n        return (0, _Debug.debugNodes)(this.getNodes());\n      }\n\n      return debug;\n    }()\n\n    /**\n     * Invokes intercepter and returns itself. intercepter is called with itself.\n     * This is helpful when debugging nodes in method chains.\n     * @param fn\n     * @returns {ShallowWrapper}\n     */\n\n  }, {\n    key: 'tap',\n    value: function () {\n      function tap(intercepter) {\n        intercepter(this);\n        return this;\n      }\n\n      return tap;\n    }()\n\n    /**\n     * Primarily useful for HOCs (higher-order components), this method may only be\n     * run on a single, non-DOM node, and will return the node, shallow-rendered.\n     *\n     * @param options object\n     * @returns {ShallowWrapper}\n     */\n\n  }, {\n    key: 'dive',\n    value: function () {\n      function dive() {\n        var _this23 = this;\n\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        var name = 'dive';\n        return this.single(name, function (n) {\n          if ((0, _reactCompat.isDOMComponentElement)(n)) {\n            throw new TypeError('ShallowWrapper::' + name + '() can not be called on DOM components');\n          }\n          if (!(0, _Utils.isCustomComponentElement)(n)) {\n            throw new TypeError('ShallowWrapper::' + name + '() can only be called on components');\n          }\n          return new ShallowWrapper(n, null, (0, _object2['default'])({}, _this23.options, options));\n        });\n      }\n\n      return dive;\n    }()\n  }]);\n\n  return ShallowWrapper;\n}();\n\nif (_Utils.ITERATOR_SYMBOL) {\n  Object.defineProperty(ShallowWrapper.prototype, _Utils.ITERATOR_SYMBOL, {\n    configurable: true,\n    value: function () {\n      function iterator() {\n        return this.nodes[_Utils.ITERATOR_SYMBOL]();\n      }\n\n      return iterator;\n    }()\n  });\n}\n\nexports['default'] = ShallowWrapper;","/home/travis/build/npmtest/node-npmtest-enzyme/node_modules/enzyme/build/mount.js":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports['default'] = mount;\n\nvar _ReactWrapper = require('./ReactWrapper');\n\nvar _ReactWrapper2 = _interopRequireDefault(_ReactWrapper);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n/**\n * Mounts and renders a react component into the document and provides a testing wrapper around it.\n *\n * @param node\n * @returns {ReactWrapper}\n */\nfunction mount(node, options) {\n  return new _ReactWrapper2['default'](node, null, options);\n}","/home/travis/build/npmtest/node-npmtest-enzyme/node_modules/enzyme/build/shallow.js":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports['default'] = shallow;\n\nvar _ShallowWrapper = require('./ShallowWrapper');\n\nvar _ShallowWrapper2 = _interopRequireDefault(_ShallowWrapper);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n/**\n * Shallow renders a react component and provides a testing wrapper around it.\n *\n * @param node\n * @returns {ShallowWrapper}\n */\nfunction shallow(node, options) {\n  return new _ShallowWrapper2['default'](node, null, options);\n}","/home/travis/build/npmtest/node-npmtest-enzyme/node_modules/enzyme/build/render.js":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nexports['default'] = render;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _object = require('object.assign');\n\nvar _object2 = _interopRequireDefault(_object);\n\nvar _cheerio = require('cheerio');\n\nvar _cheerio2 = _interopRequireDefault(_cheerio);\n\nvar _reactCompat = require('./react-compat');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n * Renders a react component into static HTML and provides a cheerio wrapper around it. This is\n * somewhat asymmetric with `mount` and `shallow`, which don't use any external libraries, but\n * Cheerio's API is pretty close to what we actually want and has a significant amount of utility\n * that would be recreating the wheel if we didn't use it.\n *\n * I think there are a lot of good use cases to use `render` instead of `shallow` or `mount`, and\n * thus I'd like to keep this API in here even though it's not really \"ours\".\n *\n * @param node\n * @param options\n * @returns {Cheerio}\n */\n\nfunction createContextWrapperForNode(node, context, childContextTypes) {\n  var ContextWrapper = function (_React$Component) {\n    _inherits(ContextWrapper, _React$Component);\n\n    function ContextWrapper() {\n      _classCallCheck(this, ContextWrapper);\n\n      return _possibleConstructorReturn(this, (ContextWrapper.__proto__ || Object.getPrototypeOf(ContextWrapper)).apply(this, arguments));\n    }\n\n    _createClass(ContextWrapper, [{\n      key: 'getChildContext',\n      value: function () {\n        function getChildContext() {\n          return context;\n        }\n\n        return getChildContext;\n      }()\n    }, {\n      key: 'render',\n      value: function () {\n        function render() {\n          return node;\n        }\n\n        return render;\n      }()\n    }]);\n\n    return ContextWrapper;\n  }(_react2['default'].Component);\n\n  ContextWrapper.childContextTypes = childContextTypes;\n  return ContextWrapper;\n}\n\nfunction render(node) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (options.context && (node.type.contextTypes || options.childContextTypes)) {\n    var childContextTypes = (0, _object2['default'])({}, node.type.contextTypes || {}, options.childContextTypes);\n    var ContextWrapper = createContextWrapperForNode(node, options.context, childContextTypes);\n    var _html = (0, _reactCompat.renderToStaticMarkup)(_react2['default'].createElement(ContextWrapper, null));\n    return _cheerio2['default'].load(_html).root();\n  }\n  var html = (0, _reactCompat.renderToStaticMarkup)(node);\n  return _cheerio2['default'].load(html).root();\n}","/home/travis/build/npmtest/node-npmtest-enzyme/node_modules/enzyme/karma.conf.js":"/* eslint-disable no-var,prefer-arrow-callback,vars-on-top */\n\nrequire('babel-register');\n\nvar IgnorePlugin = require('webpack').IgnorePlugin;\nvar REACT013 = require('./src/version').REACT013;\nvar REACT155 = require('./src/version').REACT155;\n\nfunction getPlugins() {\n  var plugins = [];\n\n  /*\n  this list of conditional IgnorePlugins mirrors the conditional\n  requires in src/react-compat.js and exists to avoid error\n  output from the webpack compilation\n  */\n\n  if (!REACT013) {\n    plugins.push(new IgnorePlugin(/react\\/lib\\/ExecutionEnvironment/));\n    plugins.push(new IgnorePlugin(/react\\/lib\\/ReactContext/));\n    plugins.push(new IgnorePlugin(/react\\/addons/));\n  }\n  if (REACT013) {\n    plugins.push(new IgnorePlugin(/react-dom/));\n  }\n  if (REACT013 || REACT155) {\n    plugins.push(new IgnorePlugin(/react-addons-test-utils/));\n  }\n  if (!REACT155) {\n    plugins.push(new IgnorePlugin(/react-test-renderer/));\n    plugins.push(new IgnorePlugin(/react-dom\\/test-utils/));\n    plugins.push(new IgnorePlugin(/create-react-class/));\n  }\n\n  return plugins;\n}\n\nmodule.exports = function karma(config) {\n  config.set({\n    basePath: '.',\n\n    plugins: [\n      'karma-chrome-launcher',\n      'karma-firefox-launcher',\n      'karma-mocha',\n      'karma-webpack',\n      'karma-sourcemap-loader',\n    ],\n\n    customLaunchers: {\n      Chrome_travis: {\n        base: 'Chrome',\n        flags: ['--no-sandbox'],\n      },\n    },\n\n    frameworks: ['mocha'],\n\n    reporters: ['dots'],\n\n    files: [\n      'test/*.{jsx,js}',\n    ],\n\n    exclude: [\n      'test/_helpers/index.jsx',\n    ],\n\n    browsers: [\n      process.env.TRAVIS ? 'Chrome_travis' : 'Chrome',\n      'Firefox',\n    ],\n\n    preprocessors: {\n      'test/*.{jsx,js}': ['webpack', 'sourcemap'],\n    },\n\n    webpack: {\n      devtool: 'inline-source-map',\n      resolve: {\n        extensions: ['', '.js', '.jsx', '.json'],\n        alias: {\n          // dynamic require calls in sinon confuse webpack so we ignore it\n          sinon: 'sinon/pkg/sinon',\n        },\n      },\n      module: {\n        noParse: [\n          // dynamic require calls in sinon confuse webpack so we ignore it\n          /node_modules\\/sinon\\//,\n        ],\n        loaders: [\n          {\n            test: /\\.jsx?$/,\n            exclude: /node_modules/,\n            loader: 'babel-loader',\n          },\n          {\n            test: /\\.json$/,\n            loader: 'json-loader',\n          },\n        ],\n      },\n      plugins: getPlugins(),\n    },\n\n    webpackServer: {\n      noInfo: true,\n    },\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-enzyme/node_modules/enzyme/mount.js":"module.exports = require('./build/mount').default;\n","/home/travis/build/npmtest/node-npmtest-enzyme/node_modules/enzyme/ReactWrapper.js":"module.exports = require('./build/ReactWrapper').default;\n","/home/travis/build/npmtest/node-npmtest-enzyme/node_modules/enzyme/render.js":"module.exports = require('./build/render').default;\n","/home/travis/build/npmtest/node-npmtest-enzyme/node_modules/enzyme/shallow.js":"module.exports = require('./build/shallow').default;\n","/home/travis/build/npmtest/node-npmtest-enzyme/node_modules/enzyme/ShallowWrapper.js":"module.exports = require('./build/ShallowWrapper').default;\n","/home/travis/build/npmtest/node-npmtest-enzyme/node_modules/enzyme/withDom.js":"if (!global.document) {\n  try {\n    const jsdom = require('jsdom').jsdom; // could throw\n\n    global.document = jsdom('');\n    global.window = document.defaultView;\n    Object.keys(document.defaultView).forEach((property) => {\n      if (typeof global[property] === 'undefined') {\n        global[property] = document.defaultView[property];\n      }\n    });\n\n    global.navigator = {\n      userAgent: 'node.js',\n    };\n  } catch (e) {\n    // jsdom is not supported...\n    if (e.message === \"Cannot find module 'jsdom'\") {\n      console.error('[enzyme/withDom] Error: missing required module \"jsdom\"');\n      console.error('[enzyme/withDom] To fix this you must run:');\n      console.error('[enzyme/withDom]   npm install jsdom --save-dev');\n    } else {\n      console.error('[enzyme withDom] ' + (e.stack || e.message));\n    }\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-enzyme/node_modules/enzyme/src/ComplexSelector.js":"import split from 'lodash/split';\n\nexport default class ComplexSelector {\n  constructor(buildPredicate, findWhereUnwrapped, childrenOfNode) {\n    this.buildPredicate = buildPredicate;\n    this.findWhereUnwrapped = findWhereUnwrapped;\n    this.childrenOfNode = childrenOfNode;\n  }\n\n  getSelectors(selector) { // eslint-disable-line class-methods-use-this\n    const selectors = split(selector, / (?=(?:(?:[^\"]*\"){2})*[^\"]*$)/);\n    return selectors.reduce((list, sel) => {\n      if (sel === '+' || sel === '~') {\n        const temp = list.pop();\n        return list.concat(sel, temp);\n      }\n\n      return list.concat(sel);\n    }, []);\n  }\n\n  handleSelectors(selectors, wrapper) {\n    const recurseSelector = (offset, fn, pre) => {\n      const predicate = pre || this.buildPredicate(selectors[offset]);\n      const nextWrapper = this.findWhereUnwrapped(wrapper, predicate, fn);\n      const nextSelectors = selectors.slice(offset + 1);\n      return this.handleSelectors(nextSelectors, nextWrapper);\n    };\n\n    const buildSiblingPredicate = (first, second) => {\n      const firstPredicate = this.buildPredicate(first);\n      const secondPredicate = this.buildPredicate(second);\n\n      return (child) => {\n        if (firstPredicate(child)) {\n          return sibling => secondPredicate(sibling);\n        }\n\n        return false;\n      };\n    };\n\n    let predicate;\n    let selectSiblings;\n\n    if (selectors.length) {\n      switch (selectors[0]) {\n        case '>':\n          return recurseSelector(1, this.treeFilterDirect());\n        case '+':\n          predicate = buildSiblingPredicate(selectors[1], selectors[2]);\n          selectSiblings = (children, pre, results, idx) => {\n            const adjacent = children[idx + 1];\n            if (pre(adjacent)) { results.push(adjacent); }\n          };\n\n          return recurseSelector(2, this.treeFindSiblings(selectSiblings), predicate);\n        case '~':\n          predicate = buildSiblingPredicate(selectors[1], selectors[2]);\n          selectSiblings = (children, pre, results, idx) =>\n            children.slice(idx + 1).map(child =>\n              (pre(child) ? results.push(child) : null),\n            );\n\n          return recurseSelector(2, this.treeFindSiblings(selectSiblings), predicate);\n        default:\n          return recurseSelector(0);\n      }\n    }\n\n    return wrapper;\n  }\n\n  find(selector, wrapper) {\n    if (typeof selector === 'string') {\n      const selectors = this.getSelectors(selector);\n\n      return this.handleSelectors(selectors, wrapper);\n    }\n\n    const predicate = this.buildPredicate(selector);\n    return this.findWhereUnwrapped(wrapper, predicate);\n  }\n\n  treeFilterDirect() {\n    return (tree, fn) => this.childrenOfNode(tree).filter(child => fn(child));\n  }\n\n  treeFindSiblings(selectSiblings) {\n    return (tree, fn) => {\n      const results = [];\n      const list = [this.childrenOfNode(tree)];\n\n      const traverseChildren = children => children.forEach((child, i) => {\n        const secondPredicate = fn(child);\n\n        list.push(this.childrenOfNode(child));\n\n        if (secondPredicate) {\n          selectSiblings(children, secondPredicate, results, i);\n        }\n      });\n\n      while (list.length) {\n        traverseChildren(list.shift());\n      }\n\n      return results;\n    };\n  }\n\n}\n","/home/travis/build/npmtest/node-npmtest-enzyme/node_modules/enzyme/src/Debug.js":"import without from 'lodash/without';\nimport escape from 'lodash/escape';\nimport compact from 'lodash/compact';\nimport objectValues from 'object.values';\nimport functionName from 'function.prototype.name';\n\nimport {\n  childrenOfNode,\n} from './ShallowTraversal';\nimport {\n  renderedChildrenOfInst,\n} from './MountedTraversal';\nimport {\n  isDOMComponent,\n  isCompositeComponent,\n  isElement,\n} from './react-compat';\nimport {\n  internalInstance,\n  propsOfNode,\n} from './Utils';\nimport { REACT013 } from './version';\n\nexport function typeName(node) {\n  return typeof node.type === 'function'\n    ? (node.type.displayName || functionName(node.type) || 'Component')\n    : node.type;\n}\n\nexport function spaces(n) {\n  return Array(n + 1).join(' ');\n}\n\nexport function indent(depth, string) {\n  return string.split('\\n').map(x => `${spaces(depth)}${x}`).join('\\n');\n}\n\nfunction propString(prop) {\n  switch (typeof prop) {\n    case 'function':\n      return '{[Function]}';\n    case 'string':\n      return `\"${prop}\"`;\n    case 'number':\n    case 'boolean':\n      return `{${prop}}`;\n    case 'object':\n      return '{{...}}';\n    default:\n      return `{[${typeof prop}]}`;\n  }\n}\n\nfunction propsString(node) {\n  const props = propsOfNode(node);\n  const keys = without(Object.keys(props), 'children');\n  return keys.map(key => `${key}=${propString(props[key])}`).join(' ');\n}\n\nexport function debugNode(node, indentLength = 2) {\n  if (typeof node === 'string' || typeof node === 'number') return escape(node);\n  if (!node) return '';\n\n  const children = compact(childrenOfNode(node).map(n => debugNode(n, indentLength)));\n  const type = typeName(node);\n  const props = propsString(node);\n  const beforeProps = props ? ' ' : '';\n  const nodeClose = children.length ? `</${type}>` : '/>';\n  const afterProps = children.length\n    ? '>'\n    : ' ';\n  const childrenIndented = children.length\n    ? `\\n${children.map(x => indent(indentLength, x)).join('\\n')}\\n`\n    : '';\n  return `<${type}${beforeProps}${props}${afterProps}${childrenIndented}${nodeClose}`;\n}\n\nexport function debugNodes(nodes) {\n  return nodes.map(debugNode).join('\\n\\n\\n');\n}\n\nexport function debugInst(inst, indentLength = 2) {\n  if (typeof inst === 'string' || typeof inst === 'number') return escape(inst);\n  if (!inst) return '';\n\n  if (inst._stringText) {\n    return inst._stringText;\n  }\n\n  if (!inst.getPublicInstance) {\n    const internal = internalInstance(inst);\n    return debugInst(internal, indentLength);\n  }\n  const publicInst = inst.getPublicInstance();\n\n  if (typeof publicInst === 'string' || typeof publicInst === 'number') return escape(publicInst);\n  if (!publicInst && !inst._renderedComponent) return '';\n\n  // do stuff with publicInst\n  const currentElement = inst._currentElement;\n  const type = typeName(currentElement);\n  const props = propsString(currentElement);\n  const children = [];\n  if (isDOMComponent(publicInst)) {\n    const renderedChildren = renderedChildrenOfInst(inst);\n    if (!renderedChildren) {\n      children.push(...childrenOfNode(currentElement));\n    } else {\n      children.push(...objectValues(renderedChildren));\n    }\n  } else if (\n    !REACT013 &&\n    isElement(currentElement) &&\n    typeof currentElement.type === 'function'\n  ) {\n    children.push(inst._renderedComponent);\n  } else if (\n    REACT013 &&\n    isCompositeComponent(publicInst)\n  ) {\n    children.push(inst._renderedComponent);\n  }\n\n  const childrenStrs = compact(children.map(n => debugInst(n, indentLength)));\n\n  const beforeProps = props ? ' ' : '';\n  const nodeClose = childrenStrs.length ? `</${type}>` : '/>';\n  const afterProps = childrenStrs.length\n    ? '>'\n    : ' ';\n  const childrenIndented = childrenStrs.length\n    ? `\\n${childrenStrs.map(x => indent(indentLength + 2, x)).join('\\n')}\\n`\n    : '';\n  return `<${type}${beforeProps}${props}${afterProps}${childrenIndented}${nodeClose}`;\n}\n\nexport function debugInsts(insts) {\n  return insts.map(debugInst).join('\\n\\n\\n');\n}\n","/home/travis/build/npmtest/node-npmtest-enzyme/node_modules/enzyme/src/index.js":"import ReactWrapper from './ReactWrapper';\nimport ShallowWrapper from './ShallowWrapper';\n\nimport mount from './mount';\nimport shallow from './shallow';\nimport render from './render';\n\nexport {\n  render,\n  shallow,\n  mount,\n  ShallowWrapper,\n  ReactWrapper,\n};\n","/home/travis/build/npmtest/node-npmtest-enzyme/node_modules/enzyme/src/MountedTraversal.js":"import isEmpty from 'lodash/isEmpty';\nimport values from 'object.values';\nimport isSubset from 'is-subset';\nimport {\n  internalInstance,\n  nodeEqual,\n  nodeMatches,\n  propsOfNode,\n  isFunctionalComponent,\n  splitSelector,\n  selectorType,\n  isCompoundSelector,\n  AND,\n  SELECTOR,\n  nodeHasType,\n  nodeHasProperty,\n} from './Utils';\nimport {\n  isDOMComponent,\n  isCompositeComponent,\n  isCompositeComponentWithType,\n  isElement,\n  findDOMNode,\n} from './react-compat';\nimport { REACT013 } from './version';\n\nexport function getNode(inst) {\n  if (!inst || inst._store || typeof inst === 'string') {\n    return inst;\n  }\n  if (inst._currentElement) {\n    return inst._currentElement;\n  }\n  if (internalInstance(inst)) {\n    return internalInstance(inst)._currentElement;\n  }\n  if (inst._reactInternalInstance) {\n    return inst._reactInternalInstance._currentElement;\n  }\n  if (inst._reactInternalComponent) {\n    return inst._reactInternalComponent._currentElement;\n  }\n  return inst;\n}\n\nexport function instEqual(a, b, lenComp) {\n  return nodeEqual(getNode(a), getNode(b), lenComp);\n}\n\nexport function instMatches(a, b, lenComp) {\n  return nodeMatches(getNode(a), getNode(b), lenComp);\n}\n\nexport function instHasClassName(inst, className) {\n  const node = findDOMNode(inst);\n  if (node === null) { // inst renders null\n    return false;\n  }\n  if (node.classList) {\n    return node.classList.contains(className);\n  }\n  let classes = node.className || '';\n  if (typeof classes === 'object') {\n    classes = classes.baseVal;\n  }\n  classes = classes.replace(/\\s/g, ' ');\n  return ` ${classes} `.indexOf(` ${className} `) > -1;\n}\n\nfunction hasClassName(inst, className) {\n  if (!isDOMComponent(inst)) {\n    return false;\n  }\n  return instHasClassName(inst, className);\n}\n\nexport function instHasId(inst, id) {\n  if (!isDOMComponent(inst)) return false;\n  const instId = findDOMNode(inst).id || '';\n  return instId === id;\n}\n\nfunction isFunctionalComponentWithType(inst, func) {\n  return isFunctionalComponent(inst) && getNode(inst).type === func;\n}\n\nexport function instHasType(inst, type) {\n  switch (typeof type) {\n    case 'string':\n      return nodeHasType(getNode(inst), type);\n    case 'function':\n      return isCompositeComponentWithType(inst, type) ||\n        isFunctionalComponentWithType(inst, type);\n    default:\n      return false;\n  }\n}\n\nexport function instHasProperty(inst, propKey, stringifiedPropValue) {\n  if (!isDOMComponent(inst)) return false;\n\n  const node = getNode(inst);\n\n  return nodeHasProperty(node, propKey, stringifiedPropValue);\n}\n\n// called with private inst\nexport function renderedChildrenOfInst(inst) {\n  return REACT013\n    ? inst._renderedComponent._renderedChildren\n    : inst._renderedChildren;\n}\n\n// called with a private instance\nexport function childrenOfInstInternal(inst) {\n  if (!inst) {\n    return [];\n  }\n  if (!inst.getPublicInstance) {\n    const internal = internalInstance(inst);\n    return childrenOfInstInternal(internal);\n  }\n\n  const publicInst = inst.getPublicInstance();\n  const currentElement = inst._currentElement;\n  if (isDOMComponent(publicInst)) {\n    const renderedChildren = renderedChildrenOfInst(inst);\n    return values(renderedChildren || {}).filter((node) => {\n      if (REACT013 && !node.getPublicInstance) {\n        return false;\n      }\n      if (typeof node._stringText !== 'undefined') {\n        return false;\n      }\n      return true;\n    }).map((node) => {\n      if (!REACT013 && typeof node._currentElement.type === 'function') {\n        return node._instance;\n      }\n      if (typeof node._stringText === 'string') {\n        return node;\n      }\n      return node.getPublicInstance();\n    });\n  } else if (\n    !REACT013 &&\n    isElement(currentElement) &&\n    typeof currentElement.type === 'function'\n  ) {\n    return childrenOfInstInternal(inst._renderedComponent);\n  } else if (\n    REACT013 &&\n    isCompositeComponent(publicInst)\n  ) {\n    return childrenOfInstInternal(inst._renderedComponent);\n  }\n  return [];\n}\n\nexport function internalInstanceOrComponent(node) {\n  if (REACT013) {\n    return node;\n  } else if (node._reactInternalComponent) {\n    return node._reactInternalComponent;\n  } else if (node._reactInternalInstance) {\n    return node._reactInternalInstance;\n  }\n  return node;\n}\n\nexport function childrenOfInst(node) {\n  return childrenOfInstInternal(internalInstanceOrComponent(node));\n}\n\n// This function should be called with an \"internal instance\". Nevertheless, if it is\n// called with a \"public instance\" instead, the function will call itself with the\n// internal instance and return the proper result.\nfunction findAllInRenderedTreeInternal(inst, test) {\n  if (!inst) {\n    return [];\n  }\n\n  if (!inst.getPublicInstance) {\n    const internal = internalInstance(inst);\n    return findAllInRenderedTreeInternal(internal, test);\n  }\n  const publicInst = inst.getPublicInstance() || inst._instance;\n  let ret = test(publicInst) ? [publicInst] : [];\n  const currentElement = inst._currentElement;\n  if (isDOMComponent(publicInst)) {\n    const renderedChildren = renderedChildrenOfInst(inst);\n    values(renderedChildren || {}).filter((node) => {\n      if (REACT013 && !node.getPublicInstance) {\n        return false;\n      }\n      return true;\n    }).forEach((node) => {\n      ret = ret.concat(findAllInRenderedTreeInternal(node, test));\n    });\n  } else if (\n    !REACT013 &&\n    isElement(currentElement) &&\n    typeof currentElement.type === 'function'\n  ) {\n    ret = ret.concat(\n      findAllInRenderedTreeInternal(\n        inst._renderedComponent,\n        test,\n      ),\n    );\n  } else if (\n    REACT013 &&\n    isCompositeComponent(publicInst)\n  ) {\n    ret = ret.concat(\n      findAllInRenderedTreeInternal(\n        inst._renderedComponent,\n        test,\n      ),\n    );\n  }\n  return ret;\n}\n\n// This function could be called with a number of different things technically, so we need to\n// pass the *right* thing to our internal helper.\nexport function treeFilter(node, test) {\n  return findAllInRenderedTreeInternal(internalInstanceOrComponent(node), test);\n}\n\nfunction pathFilter(path, fn) {\n  return path.filter(tree => treeFilter(tree, fn).length !== 0);\n}\n\nexport function pathToNode(node, root) {\n  const queue = [root];\n  const path = [];\n\n  const hasNode = testNode => node === testNode;\n\n  while (queue.length) {\n    const current = queue.pop();\n    const children = childrenOfInst(current);\n\n    if (current === node) return pathFilter(path, hasNode);\n\n    path.push(current);\n\n    if (children.length === 0) {\n      // leaf node. if it isn't the node we are looking for, we pop.\n      path.pop();\n    }\n    queue.push(...children);\n  }\n\n  return null;\n}\n\nexport function parentsOfInst(inst, root) {\n  return pathToNode(inst, root).reverse();\n}\n\nexport function instMatchesObjectProps(inst, props) {\n  if (!isDOMComponent(inst)) return false;\n  const node = getNode(inst);\n  return isSubset(propsOfNode(node), props);\n}\n\nexport function buildInstPredicate(selector) {\n  switch (typeof selector) {\n    case 'function':\n      // selector is a component constructor\n      return inst => instHasType(inst, selector);\n\n    case 'string':\n      if (isCompoundSelector.test(selector)) {\n        return AND(splitSelector(selector).map(buildInstPredicate));\n      }\n\n      switch (selectorType(selector)) {\n        case SELECTOR.CLASS_TYPE:\n          return inst => hasClassName(inst, selector.slice(1));\n        case SELECTOR.ID_TYPE:\n          return inst => instHasId(inst, selector.slice(1));\n        case SELECTOR.PROP_TYPE: {\n          const propKey = selector.split(/\\[([a-zA-Z][a-zA-Z_\\d\\-:]*?)(=|])/)[1];\n          const propValue = selector.split(/=(.*?)]/)[1];\n\n          return node => instHasProperty(node, propKey, propValue);\n        }\n        default:\n          // selector is a string. match to DOM tag or constructor displayName\n          return inst => instHasType(inst, selector);\n      }\n\n    case 'object':\n      if (!Array.isArray(selector) && selector !== null && !isEmpty(selector)) {\n        return node => instMatchesObjectProps(node, selector);\n      }\n      throw new TypeError(\n        'Enzyme::Selector does not support an array, null, or empty object as a selector',\n      );\n\n    default:\n      throw new TypeError('Enzyme::Selector expects a string, object, or Component Constructor');\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-enzyme/node_modules/enzyme/src/react-compat.js":"/* eslint\n  global-require: 0,\n  import/no-mutable-exports: 0,\n  import/no-unresolved: 0,\n  react/no-deprecated: 0,\n  react/no-render-return-value: 0,\n*/\n\nimport objectAssign from 'object.assign';\nimport { REACT013, REACT155 } from './version';\n\nlet TestUtils;\nlet createShallowRenderer;\nlet renderToStaticMarkup;\nlet renderIntoDocument;\nlet findDOMNode;\nlet childrenToArray;\nlet renderWithOptions;\nlet unmountComponentAtNode;\nlet batchedUpdates;\nlet shallowRendererFactory;\n\nconst React = require('react');\n\nif (REACT013) {\n  renderToStaticMarkup = React.renderToStaticMarkup;\n  /* eslint-disable react/no-deprecated */\n  findDOMNode = React.findDOMNode;\n  unmountComponentAtNode = React.unmountComponentAtNode;\n  /* eslint-enable react/no-deprecated */\n  TestUtils = require('react/addons').addons.TestUtils;\n  batchedUpdates = require('react/addons').addons.batchedUpdates;\n  const ReactContext = require('react/lib/ReactContext');\n\n  // Shallow rendering in 0.13 did not properly support context. This function provides a shim\n  // around `TestUtils.createRenderer` that instead returns a ShallowRenderer that actually\n  // works with context. See https://github.com/facebook/react/issues/3721 for more details.\n  createShallowRenderer = function createRendererCompatible() {\n    const renderer = TestUtils.createRenderer();\n    renderer.render = (originalRender => function contextCompatibleRender(node, context = {}) {\n      ReactContext.current = context;\n      originalRender.call(this, React.createElement(node.type, node.props), context);\n      ReactContext.current = {};\n      return renderer.getRenderOutput();\n    })(renderer.render);\n    return renderer;\n  };\n  renderIntoDocument = TestUtils.renderIntoDocument;\n  // this fixes some issues in React 0.13 with setState and jsdom...\n  // see issue: https://github.com/airbnb/enzyme/issues/27\n  require('react/lib/ExecutionEnvironment').canUseDOM = true;\n\n  // in 0.13, a Children.toArray function was not exported. Make our own instead.\n  childrenToArray = (children) => {\n    const results = [];\n    if (children !== undefined && children !== null && children !== false) {\n      React.Children.forEach(children, (el) => {\n        if (el !== undefined && el !== null && el !== false) {\n          results.push(el);\n        }\n      });\n    }\n    return results;\n  };\n\n  renderWithOptions = (node, options) => {\n    if (options.attachTo) {\n      return React.render(node, options.attachTo);\n    }\n    return TestUtils.renderIntoDocument(node);\n  };\n} else {\n  let ReactDOM;\n\n  try {\n    // eslint-disable-next-line import/no-extraneous-dependencies\n    ReactDOM = require('react-dom');\n  } catch (e) {\n    // eslint-disable-next-line no-console\n    console.error(\n      'react-dom is an implicit dependency in order to support react@0.13-14. ' +\n      'Please add the appropriate version to your devDependencies. ' +\n      'See https://github.com/airbnb/enzyme#installation',\n    );\n    throw e;\n  }\n\n  // eslint-disable-next-line import/no-extraneous-dependencies\n  renderToStaticMarkup = require('react-dom/server').renderToStaticMarkup;\n\n  findDOMNode = ReactDOM.findDOMNode;\n  unmountComponentAtNode = ReactDOM.unmountComponentAtNode;\n  batchedUpdates = ReactDOM.unstable_batchedUpdates;\n  // We require the testutils, but they don't come with 0.14 out of the box, so we\n  // require them here through this node module. The bummer is that we are not able\n  // to list this as a dependency in package.json and have 0.13 work properly.\n  // As a result, right now this is basically an implicit dependency.\n  try {\n    try {\n      // This is for react v15.5 and up...\n\n      // eslint-disable-next-line import/no-extraneous-dependencies\n      TestUtils = require('react-dom/test-utils');\n      // eslint-disable-next-line import/no-extraneous-dependencies\n      shallowRendererFactory = require('react-test-renderer/shallow').createRenderer;\n    } catch (e) {\n      // This is for react < v15.5.  Note that users who have `react^15.4.x` in their package.json\n      // will arrive here, too.  They need to upgrade.  React will print a nice warning letting\n      // them know they need to upgrade, though, so we're good.  Also note we explicitly do not\n      // use TestUtils from react-dom/test-utils here, mainly so the user still gets a warning for\n      // requiring 'react-addons-test-utils', which lets them know there's action required.\n\n      // eslint-disable-next-line import/no-extraneous-dependencies\n      TestUtils = require('react-addons-test-utils');\n      shallowRendererFactory = TestUtils.createRenderer;\n    }\n  } catch (e) {\n    if (REACT155) {\n      console.error( // eslint-disable-line no-console\n        'react-dom@15.5+ and react-test-renderer are implicit dependencies when using' +\n        'react@15.5+ with enzyme. Please add the appropriate version to your' +\n        'devDependencies. See https://github.com/airbnb/enzyme#installation',\n      );\n    } else {\n      console.error( // eslint-disable-line no-console\n        'react-addons-test-utils is an implicit dependency in order to support react@0.13-14. ' +\n        'Please add the appropriate version to your devDependencies. ' +\n        'See https://github.com/airbnb/enzyme#installation',\n      );\n    }\n    throw e;\n  }\n\n  // Shallow rendering changed from 0.13 => 0.14 in such a way that\n  // 0.14 now does not allow shallow rendering of native DOM elements.\n  // This is mainly because the result of such a call should not realistically\n  // be any different than the JSX you passed in (result of `React.createElement`.\n  // In order to maintain the same behavior across versions, this function\n  // is essentially a replacement for `TestUtils.createRenderer` that doesn't use\n  // shallow rendering when it's just a DOM element.\n  createShallowRenderer = function createRendererCompatible() {\n    const renderer = shallowRendererFactory();\n    const originalRender = renderer.render;\n    const originalRenderOutput = renderer.getRenderOutput;\n    let isDOM = false;\n    let cachedNode;\n    return objectAssign(renderer, {\n      render(node, context) {\n        /* eslint consistent-return: 0 */\n        if (typeof node.type === 'string') {\n          isDOM = true;\n          cachedNode = node;\n        } else {\n          isDOM = false;\n          return originalRender.call(this, node, context);\n        }\n      },\n      getRenderOutput() {\n        if (isDOM) {\n          return cachedNode;\n        }\n        return originalRenderOutput.call(this);\n      },\n    });\n  };\n  renderIntoDocument = TestUtils.renderIntoDocument;\n  childrenToArray = React.Children.toArray;\n\n  renderWithOptions = (node, options) => {\n    if (options.attachTo) {\n      return ReactDOM.render(node, options.attachTo);\n    }\n    return TestUtils.renderIntoDocument(node);\n  };\n}\n\nfunction isDOMComponentElement(inst) {\n  return React.isValidElement(inst) && typeof inst.type === 'string';\n}\n\nconst {\n  mockComponent,\n  isElement,\n  isElementOfType,\n  isDOMComponent,\n  isCompositeComponent,\n  isCompositeComponentWithType,\n  isCompositeComponentElement,\n  Simulate,\n  findAllInRenderedTree,\n} = TestUtils;\n\nexport {\n  createShallowRenderer,\n  renderToStaticMarkup,\n  renderIntoDocument,\n  mockComponent,\n  isElement,\n  isElementOfType,\n  isDOMComponent,\n  isDOMComponentElement,\n  isCompositeComponent,\n  isCompositeComponentWithType,\n  isCompositeComponentElement,\n  Simulate,\n  findDOMNode,\n  findAllInRenderedTree,\n  childrenToArray,\n  renderWithOptions,\n  unmountComponentAtNode,\n  batchedUpdates,\n};\n","/home/travis/build/npmtest/node-npmtest-enzyme/node_modules/enzyme/src/ShallowTraversal.js":"import React from 'react';\nimport isEmpty from 'lodash/isEmpty';\nimport isSubset from 'is-subset';\nimport functionName from 'function.prototype.name';\nimport {\n  propsOfNode,\n  splitSelector,\n  isCompoundSelector,\n  selectorType,\n  AND,\n  SELECTOR,\n  nodeHasType,\n  nodeHasProperty,\n} from './Utils';\n\n\nexport function childrenOfNode(node) {\n  if (!node) return [];\n  const maybeArray = propsOfNode(node).children;\n  const result = [];\n  React.Children.forEach(maybeArray, (child) => {\n    if (child !== null && child !== false && typeof child !== 'undefined') {\n      result.push(child);\n    }\n  });\n  return result;\n}\n\nexport function hasClassName(node, className) {\n  let classes = propsOfNode(node).className || '';\n  classes = String(classes).replace(/\\s/g, ' ');\n  return ` ${classes} `.indexOf(` ${className} `) > -1;\n}\n\nexport function treeForEach(tree, fn) {\n  if (tree !== null && tree !== false && typeof tree !== 'undefined') {\n    fn(tree);\n  }\n  childrenOfNode(tree).forEach(node => treeForEach(node, fn));\n}\n\nexport function treeFilter(tree, fn) {\n  const results = [];\n  treeForEach(tree, (node) => {\n    if (fn(node)) {\n      results.push(node);\n    }\n  });\n  return results;\n}\n\nfunction pathFilter(path, fn) {\n  return path.filter(tree => treeFilter(tree, fn).length !== 0);\n}\n\nexport function pathToNode(node, root) {\n  const queue = [root];\n  const path = [];\n\n  const hasNode = testNode => node === testNode;\n\n  while (queue.length) {\n    const current = queue.pop();\n    const children = childrenOfNode(current);\n    if (current === node) return pathFilter(path, hasNode);\n\n    path.push(current);\n\n    if (children.length === 0) {\n      // leaf node. if it isn't the node we are looking for, we pop.\n      path.pop();\n    }\n    queue.push(...children);\n  }\n\n  return null;\n}\n\nexport function parentsOfNode(node, root) {\n  return pathToNode(node, root).reverse();\n}\n\nexport function nodeHasId(node, id) {\n  return propsOfNode(node).id === id;\n}\n\n\nexport { nodeHasProperty };\n\nexport function nodeMatchesObjectProps(node, props) {\n  return isSubset(propsOfNode(node), props);\n}\n\nexport function buildPredicate(selector) {\n  switch (typeof selector) {\n    case 'function':\n      // selector is a component constructor\n      return node => node && node.type === selector;\n\n    case 'string':\n      if (isCompoundSelector.test(selector)) {\n        return AND(splitSelector(selector).map(buildPredicate));\n      }\n\n      switch (selectorType(selector)) {\n        case SELECTOR.CLASS_TYPE:\n          return node => hasClassName(node, selector.slice(1));\n\n        case SELECTOR.ID_TYPE:\n          return node => nodeHasId(node, selector.slice(1));\n\n        case SELECTOR.PROP_TYPE: {\n          const propKey = selector.split(/\\[([a-zA-Z-]*?)(=|])/)[1];\n          const propValue = selector.split(/=(.*?)]/)[1];\n\n          return node => nodeHasProperty(node, propKey, propValue);\n        }\n        default:\n          // selector is a string. match to DOM tag or constructor displayName\n          return node => nodeHasType(node, selector);\n      }\n\n    case 'object':\n      if (!Array.isArray(selector) && selector !== null && !isEmpty(selector)) {\n        return node => nodeMatchesObjectProps(node, selector);\n      }\n      throw new TypeError(\n        'Enzyme::Selector does not support an array, null, or empty object as a selector',\n      );\n\n    default:\n      throw new TypeError('Enzyme::Selector expects a string, object, or Component Constructor');\n  }\n}\n\n\nexport function getTextFromNode(node) {\n  if (node === null || node === undefined) {\n    return '';\n  }\n\n  if (typeof node === 'string' || typeof node === 'number') {\n    return String(node);\n  }\n\n  if (node.type && typeof node.type === 'function') {\n    return `<${node.type.displayName || functionName(node.type)} />`;\n  }\n\n  return childrenOfNode(node).map(getTextFromNode)\n    .join('')\n    .replace(/\\s+/, ' ');\n}\n","/home/travis/build/npmtest/node-npmtest-enzyme/node_modules/enzyme/src/Utils.js":"/* eslint no-use-before-define:0 */\nimport isEqual from 'lodash/isEqual';\nimport React from 'react';\nimport is from 'object-is';\nimport uuid from 'uuid';\nimport entries from 'object.entries';\nimport assign from 'object.assign';\nimport functionName from 'function.prototype.name';\nimport {\n  isDOMComponent,\n  findDOMNode,\n  childrenToArray,\n} from './react-compat';\nimport {\n  REACT013,\n  REACT15,\n} from './version';\n\nexport const ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\n\nfunction internalInstanceKey(node) {\n  return Object.keys(Object(node)).filter(key => key.match(/^__reactInternalInstance\\$/))[0];\n}\n\nexport function internalInstance(inst) {\n  return inst._reactInternalInstance ||\n    inst[internalInstanceKey(inst)];\n}\n\nexport function isFunctionalComponent(inst) {\n  return !!inst && !!inst.constructor && typeof inst.constructor === 'function' &&\n    functionName(inst.constructor) === 'StatelessComponent';\n}\n\nexport function isCustomComponentElement(inst) {\n  return !!inst && React.isValidElement(inst) && typeof inst.type === 'function';\n}\n\nexport function propsOfNode(node) {\n  if (REACT013 && node && node._store) {\n    return (node._store.props) || {};\n  }\n  if (node && node._reactInternalComponent && node._reactInternalComponent._currentElement) {\n    return (node._reactInternalComponent._currentElement.props) || {};\n  }\n  if (node && node._currentElement) {\n    return (node._currentElement.props) || {};\n  }\n  if (REACT15 && node) {\n    if (internalInstance(node) && internalInstance(node)._currentElement) {\n      return (internalInstance(node)._currentElement.props) || {};\n    }\n  }\n\n  return (node && node.props) || {};\n}\n\nexport function typeOfNode(node) {\n  return node ? node.type : null;\n}\n\nexport function getNode(node) {\n  return isDOMComponent(node) ? findDOMNode(node) : node;\n}\n\nexport function nodeHasType(node, type) {\n  if (!type || !node) return false;\n  if (!node.type) return false;\n  if (typeof node.type === 'string') return node.type === type;\n  return (typeof node.type === 'function' ?\n    functionName(node.type) === type : node.type.name === type) || node.type.displayName === type;\n}\n\nfunction internalChildrenCompare(a, b, lenComp, isLoose) {\n  const nodeCompare = isLoose ? nodeMatches : nodeEqual;\n\n  if (a === b) return true;\n  if (!Array.isArray(a) && !Array.isArray(b)) {\n    return nodeCompare(a, b, lenComp);\n  }\n  if (!a && !b) return true;\n  if (a.length !== b.length) return false;\n  if (a.length === 0 && b.length === 0) return true;\n  for (let i = 0; i < a.length; i += 1) {\n    if (!nodeCompare(a[i], b[i], lenComp)) return false;\n  }\n  return true;\n}\n\nexport function childrenMatch(a, b, lenComp) {\n  return internalChildrenCompare(a, b, lenComp, true);\n}\n\nexport function childrenEqual(a, b, lenComp) {\n  return internalChildrenCompare(a, b, lenComp, false);\n}\n\nfunction removeNullaryReducer(acc, [key, value]) {\n  const addition = value == null ? {} : { [key]: value };\n  return assign({}, acc, addition);\n}\n\nfunction internalNodeCompare(a, b, lenComp, isLoose) {\n  if (a === b) return true;\n  if (!a || !b) return false;\n  if (a.type !== b.type) return false;\n\n  let left = propsOfNode(a);\n  let right = propsOfNode(b);\n  if (isLoose) {\n    left = entries(left).reduce(removeNullaryReducer, {});\n    right = entries(right).reduce(removeNullaryReducer, {});\n  }\n\n  const leftKeys = Object.keys(left);\n  for (let i = 0; i < leftKeys.length; i += 1) {\n    const prop = leftKeys[i];\n    // we will check children later\n    if (prop === 'children') {\n      // continue;\n    } else if (!(prop in right)) {\n      return false;\n    } else if (right[prop] === left[prop]) {\n      // continue;\n    } else if (typeof right[prop] === typeof left[prop] && typeof left[prop] === 'object') {\n      if (!isEqual(left[prop], right[prop])) return false;\n    } else {\n      return false;\n    }\n  }\n\n  const leftHasChildren = 'children' in left;\n  const rightHasChildren = 'children' in right;\n  const childCompare = isLoose ? childrenMatch : childrenEqual;\n  if (leftHasChildren || rightHasChildren) {\n    if (!childCompare(\n      childrenToSimplifiedArray(left.children),\n      childrenToSimplifiedArray(right.children),\n      lenComp,\n    )) {\n      return false;\n    }\n  }\n\n  if (!isTextualNode(a)) {\n    const rightKeys = Object.keys(right);\n    return lenComp(leftKeys.length - leftHasChildren, rightKeys.length - rightHasChildren);\n  }\n\n  return false;\n}\n\nexport function nodeMatches(a, b, lenComp = is) {\n  return internalNodeCompare(a, b, lenComp, true);\n}\n\nexport function nodeEqual(a, b, lenComp = is) {\n  return internalNodeCompare(a, b, lenComp, false);\n}\n\nexport function containsChildrenSubArray(match, node, subArray) {\n  const children = childrenOfNode(node);\n  const checker = (_, i) => arraysEqual(match, children.slice(i, i + subArray.length), subArray);\n  return children.some(checker);\n}\n\nfunction arraysEqual(match, left, right) {\n  return left.length === right.length && left.every((el, i) => match(el, right[i]));\n}\n\nexport function childrenToSimplifiedArray(nodeChildren) {\n  const childrenArray = childrenToArray(nodeChildren);\n  const simplifiedArray = [];\n\n  for (let i = 0; i < childrenArray.length; i += 1) {\n    const child = childrenArray[i];\n    const previousChild = simplifiedArray.pop();\n\n    if (previousChild === undefined) {\n      simplifiedArray.push(child);\n    } else if (isTextualNode(child) && isTextualNode(previousChild)) {\n      simplifiedArray.push(previousChild + child);\n    } else {\n      simplifiedArray.push(previousChild);\n      simplifiedArray.push(child);\n    }\n  }\n\n  return simplifiedArray;\n}\n\nfunction childrenOfNode(node) {\n  const props = propsOfNode(node);\n  const { children } = props;\n  return childrenToArray(children);\n}\n\nfunction isTextualNode(node) {\n  return typeof node === 'string' || typeof node === 'number';\n}\n\nexport function isReactElementAlike(arg) {\n  return React.isValidElement(arg) || isTextualNode(arg) || Array.isArray(arg);\n}\n\n// 'click' => 'onClick'\n// 'mouseEnter' => 'onMouseEnter'\nexport function propFromEvent(event) {\n  const nativeEvent = mapNativeEventNames(event);\n  return `on${nativeEvent[0].toUpperCase()}${nativeEvent.slice(1)}`;\n}\n\nexport function withSetStateAllowed(fn) {\n  // NOTE(lmr):\n  // this is currently here to circumvent a React bug where `setState()` is\n  // not allowed without global being defined.\n  let cleanup = false;\n  if (typeof global.document === 'undefined') {\n    cleanup = true;\n    global.document = {};\n  }\n  fn();\n  if (cleanup) {\n    // This works around a bug in node/jest in that developers aren't able to\n    // delete things from global when running in a node vm.\n    global.document = undefined;\n    delete global.document;\n  }\n}\n\nexport function splitSelector(selector) {\n  // step 1: make a map of all quoted strings with a uuid\n  const quotedSegments = selector.split(/[^\" ]+|(\"[^\"]*\")|.*/g)\n    .filter(Boolean)\n    .reduce((obj, match) => assign({}, obj, { [match]: uuid.v4() }), {});\n\n  const splits = selector\n    // step 2: replace all quoted strings with the uuid, so we don't have to properly parse them\n    .replace(/[^\" ]+|(\"[^\"]*\")|.*/g, x => quotedSegments[x] || x)\n    // step 3: split as best we can without a proper parser\n    .split(/(?=\\.|\\[.*])|(?=#|\\[#.*])/)\n    // step 4: restore the quoted strings by swapping back the uuid's for the original segments\n    .map((selectorSegment) => {\n      let restoredSegment = selectorSegment;\n      entries(quotedSegments).forEach(([k, v]) => {\n        restoredSegment = restoredSegment.replace(v, k);\n      });\n      return restoredSegment;\n    });\n\n  if (splits.length === 1 && splits[0] === selector) {\n    // splitSelector expects selector to be \"splittable\"\n    throw new TypeError('Enzyme::Selector received what appears to be a malformed string selector');\n  }\n\n  return splits;\n}\n\n\nconst containsQuotes = /'|\"/;\nconst containsColon = /:/;\n\n\nexport function isPseudoClassSelector(selector) {\n  if (containsColon.test(selector)) {\n    if (!containsQuotes.test(selector)) {\n      return true;\n    }\n    const tokens = selector.split(containsQuotes);\n    return tokens.some((token, i) =>\n      containsColon.test(token) && i % 2 === 0,\n    );\n  }\n  return false;\n}\n\nexport function selectorError(selector, type = '') {\n  return new TypeError(\n    `Enzyme received a ${type} CSS selector ('${selector}') that it does not currently support`,\n  );\n}\n\nexport const isCompoundSelector = /^[.#]?-?[_a-z]+[_a-z0-9-]*[.[#]/i;\n\nconst isPropSelector = /^\\[.*]$/;\n\nexport const SELECTOR = {\n  CLASS_TYPE: 0,\n  ID_TYPE: 1,\n  PROP_TYPE: 2,\n};\n\nexport function selectorType(selector) {\n  if (isPseudoClassSelector(selector)) {\n    throw selectorError(selector, 'pseudo-class');\n  }\n  if (selector[0] === '.') {\n    return SELECTOR.CLASS_TYPE;\n  } else if (selector[0] === '#') {\n    return SELECTOR.ID_TYPE;\n  } else if (isPropSelector.test(selector)) {\n    return SELECTOR.PROP_TYPE;\n  }\n  return undefined;\n}\n\nexport function AND(fns) {\n  const fnsReversed = fns.slice().reverse();\n  return x => fnsReversed.every(fn => fn(x));\n}\n\nexport function coercePropValue(propName, propValue) {\n  // can be undefined\n  if (propValue === undefined) {\n    return propValue;\n  }\n\n  // can be the empty string\n  if (propValue === '') {\n    return propValue;\n  }\n\n  if (propValue === 'NaN') {\n    return NaN;\n  }\n\n  if (propValue === 'null') {\n    return null;\n  }\n\n  const trimmedValue = propValue.trim();\n\n  // if propValue includes quotes, it should be\n  // treated as a string\n  // eslint override pending https://github.com/eslint/eslint/issues/7472\n  // eslint-disable-next-line no-useless-escape\n  if (/^(['\"]).*\\1$/.test(trimmedValue)) {\n    return trimmedValue.slice(1, -1);\n  }\n\n  const numericPropValue = +trimmedValue;\n\n  // if parseInt is not NaN, then we've wanted a number\n  if (!is(NaN, numericPropValue)) {\n    return numericPropValue;\n  }\n\n  // coerce to boolean\n  if (trimmedValue === 'true') return true;\n  if (trimmedValue === 'false') return false;\n\n  // user provided an unquoted string value\n  throw new TypeError(\n    `Enzyme::Unable to parse selector '[${propName}=${propValue}]'. ` +\n    `Perhaps you forgot to escape a string? Try '[${propName}=\"${trimmedValue}\"]' instead.`,\n  );\n}\n\nexport function nodeHasProperty(node, propKey, stringifiedPropValue) {\n  const nodeProps = propsOfNode(node);\n  const descriptor = Object.getOwnPropertyDescriptor(nodeProps, propKey);\n  if (descriptor && descriptor.get) {\n    return false;\n  }\n  const nodePropValue = nodeProps[propKey];\n\n  const propValue = coercePropValue(propKey, stringifiedPropValue);\n\n  if (nodePropValue === undefined) {\n    return false;\n  }\n\n  if (propValue !== undefined) {\n    return is(nodePropValue, propValue);\n  }\n\n  return Object.prototype.hasOwnProperty.call(nodeProps, propKey);\n}\n\nexport function mapNativeEventNames(event) {\n  const nativeToReactEventMap = {\n    compositionend: 'compositionEnd',\n    compositionstart: 'compositionStart',\n    compositionupdate: 'compositionUpdate',\n    keydown: 'keyDown',\n    keyup: 'keyUp',\n    keypress: 'keyPress',\n    contextmenu: 'contextMenu',\n    dblclick: 'doubleClick',\n    doubleclick: 'doubleClick', // kept for legacy. TODO: remove with next major.\n    dragend: 'dragEnd',\n    dragenter: 'dragEnter',\n    dragexist: 'dragExit',\n    dragleave: 'dragLeave',\n    dragover: 'dragOver',\n    dragstart: 'dragStart',\n    mousedown: 'mouseDown',\n    mousemove: 'mouseMove',\n    mouseout: 'mouseOut',\n    mouseover: 'mouseOver',\n    mouseup: 'mouseUp',\n    touchcancel: 'touchCancel',\n    touchend: 'touchEnd',\n    touchmove: 'touchMove',\n    touchstart: 'touchStart',\n    canplay: 'canPlay',\n    canplaythrough: 'canPlayThrough',\n    durationchange: 'durationChange',\n    loadeddata: 'loadedData',\n    loadedmetadata: 'loadedMetadata',\n    loadstart: 'loadStart',\n    ratechange: 'rateChange',\n    timeupdate: 'timeUpdate',\n    volumechange: 'volumeChange',\n    beforeinput: 'beforeInput',\n  };\n\n  if (!REACT013) {\n    // these could not be simulated in React 0.13:\n    // https://github.com/facebook/react/issues/1297\n    nativeToReactEventMap.mouseenter = 'mouseEnter';\n    nativeToReactEventMap.mouseleave = 'mouseLeave';\n  }\n\n  return nativeToReactEventMap[event] || event;\n}\n\nexport function displayNameOfNode(node) {\n  const { type } = node;\n\n  if (!type) return null;\n\n  return type.displayName || (typeof type === 'function' ? functionName(type) : type.name || type);\n}\n","/home/travis/build/npmtest/node-npmtest-enzyme/node_modules/enzyme/src/version.js":"import React from 'react';\n\nexport const VERSION = React.version;\n\nconst [major, minor] = VERSION.split('.');\n\nexport const REACT013 = VERSION.slice(0, 4) === '0.13';\nexport const REACT014 = VERSION.slice(0, 4) === '0.14';\nexport const REACT15 = major === '15';\nexport const REACT155 = REACT15 && minor >= 5;\n"}